//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

XiaohaChartWebapi_reqChart_args = function(args) {
  this.platformArgs = null;
  this.option = null;
  this.pageOption = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.option !== undefined) {
      this.option = args.option;
    }
    if (args.pageOption !== undefined) {
      this.pageOption = args.pageOption;
    }
  }
};
XiaohaChartWebapi_reqChart_args.prototype = {};
XiaohaChartWebapi_reqChart_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.option = new ReqChartOption();
        this.option.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pageOption = new IndexedPageOption();
        this.pageOption.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_reqChart_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_reqChart_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.option !== null && this.option !== undefined) {
    output.writeFieldBegin('option', Thrift.Type.STRUCT, 2);
    this.option.write(output);
    output.writeFieldEnd();
  }
  if (this.pageOption !== null && this.pageOption !== undefined) {
    output.writeFieldBegin('pageOption', Thrift.Type.STRUCT, 3);
    this.pageOption.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_reqChart_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_reqChart_result.prototype = {};
XiaohaChartWebapi_reqChart_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChartPage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_reqChart_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_reqChart_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_updateChartTags_args = function(args) {
  this.platformArgs = null;
  this.chartId = null;
  this.tags = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.chartId !== undefined) {
      this.chartId = args.chartId;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
  }
};
XiaohaChartWebapi_updateChartTags_args.prototype = {};
XiaohaChartWebapi_updateChartTags_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.chartId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size24 = 0;
        var _rtmp328;
        this.tags = [];
        var _etype27 = 0;
        _rtmp328 = input.readSetBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString().value;
          this.tags.push(elem30);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_updateChartTags_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_updateChartTags_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.chartId !== null && this.chartId !== undefined) {
    output.writeFieldBegin('chartId', Thrift.Type.I64, 2);
    output.writeI64(this.chartId);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter31 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter31))
      {
        iter31 = this.tags[iter31];
        output.writeString(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_updateChartTags_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_updateChartTags_result.prototype = {};
XiaohaChartWebapi_updateChartTags_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OperateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_updateChartTags_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_updateChartTags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_updateChartState_args = function(args) {
  this.platformArgs = null;
  this.chartId = null;
  this.state = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.chartId !== undefined) {
      this.chartId = args.chartId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
XiaohaChartWebapi_updateChartState_args.prototype = {};
XiaohaChartWebapi_updateChartState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.chartId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_updateChartState_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_updateChartState_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.chartId !== null && this.chartId !== undefined) {
    output.writeFieldBegin('chartId', Thrift.Type.I64, 2);
    output.writeI64(this.chartId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_updateChartState_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_updateChartState_result.prototype = {};
XiaohaChartWebapi_updateChartState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OperateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_updateChartState_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_updateChartState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_reqTags_args = function(args) {
  this.platformArgs = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
  }
};
XiaohaChartWebapi_reqTags_args.prototype = {};
XiaohaChartWebapi_reqTags_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_reqTags_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_reqTags_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_reqTags_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_reqTags_result.prototype = {};
XiaohaChartWebapi_reqTags_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString().value;
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_reqTags_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_reqTags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_reqPlates_args = function(args) {
  this.platformArgs = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
  }
};
XiaohaChartWebapi_reqPlates_args.prototype = {};
XiaohaChartWebapi_reqPlates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_reqPlates_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_reqPlates_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_reqPlates_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_reqPlates_result.prototype = {};
XiaohaChartWebapi_reqPlates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString().value;
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_reqPlates_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_reqPlates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_removeTag_args = function(args) {
  this.platformArgs = null;
  this.tagId = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.tagId !== undefined) {
      this.tagId = args.tagId;
    }
  }
};
XiaohaChartWebapi_removeTag_args.prototype = {};
XiaohaChartWebapi_removeTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.tagId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_removeTag_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_removeTag_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.tagId !== null && this.tagId !== undefined) {
    output.writeFieldBegin('tagId', Thrift.Type.I64, 2);
    output.writeI64(this.tagId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_removeTag_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_removeTag_result.prototype = {};
XiaohaChartWebapi_removeTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OperateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_removeTag_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_removeTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_updateTag_args = function(args) {
  this.platformArgs = null;
  this.tag = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
  }
};
XiaohaChartWebapi_updateTag_args.prototype = {};
XiaohaChartWebapi_updateTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new XueQiaoTag();
        this.tag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_updateTag_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_updateTag_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 2);
    this.tag.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_updateTag_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_updateTag_result.prototype = {};
XiaohaChartWebapi_updateTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OperateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_updateTag_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_updateTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_addTag_args = function(args) {
  this.platformArgs = null;
  this.tag = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
  }
};
XiaohaChartWebapi_addTag_args.prototype = {};
XiaohaChartWebapi_addTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new XueQiaoTag();
        this.tag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_addTag_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_addTag_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 2);
    this.tag.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_addTag_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_addTag_result.prototype = {};
XiaohaChartWebapi_addTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OperateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_addTag_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_addTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_reqTagPage_args = function(args) {
  this.platformArgs = null;
  this.option = null;
  this.pageOption = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.option !== undefined) {
      this.option = args.option;
    }
    if (args.pageOption !== undefined) {
      this.pageOption = args.pageOption;
    }
  }
};
XiaohaChartWebapi_reqTagPage_args.prototype = {};
XiaohaChartWebapi_reqTagPage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.option = new ReqTagOption();
        this.option.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pageOption = new IndexedPageOption();
        this.pageOption.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_reqTagPage_args.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_reqTagPage_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.option !== null && this.option !== undefined) {
    output.writeFieldBegin('option', Thrift.Type.STRUCT, 2);
    this.option.write(output);
    output.writeFieldEnd();
  }
  if (this.pageOption !== null && this.pageOption !== undefined) {
    output.writeFieldBegin('pageOption', Thrift.Type.STRUCT, 3);
    this.pageOption.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapi_reqTagPage_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XiaohaChartWebapi_reqTagPage_result.prototype = {};
XiaohaChartWebapi_reqTagPage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new XueQiaoTagPage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XiaohaChartWebapi_reqTagPage_result.prototype.write = function(output) {
  output.writeStructBegin('XiaohaChartWebapi_reqTagPage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XiaohaChartWebapiClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
XiaohaChartWebapiClient.prototype = {};
XiaohaChartWebapiClient.prototype.reqChart = function(platformArgs, option, pageOption) {
  this.send_reqChart(platformArgs, option, pageOption);
  return this.recv_reqChart();
};

XiaohaChartWebapiClient.prototype.send_reqChart = function(platformArgs, option, pageOption) {
  this.output.writeMessageBegin('reqChart', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_reqChart_args();
  args.platformArgs = platformArgs;
  args.option = option;
  args.pageOption = pageOption;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_reqChart = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_reqChart_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reqChart failed: unknown result';
};
XiaohaChartWebapiClient.prototype.updateChartTags = function(platformArgs, chartId, tags) {
  this.send_updateChartTags(platformArgs, chartId, tags);
  return this.recv_updateChartTags();
};

XiaohaChartWebapiClient.prototype.send_updateChartTags = function(platformArgs, chartId, tags) {
  this.output.writeMessageBegin('updateChartTags', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_updateChartTags_args();
  args.platformArgs = platformArgs;
  args.chartId = chartId;
  args.tags = tags;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_updateChartTags = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_updateChartTags_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateChartTags failed: unknown result';
};
XiaohaChartWebapiClient.prototype.updateChartState = function(platformArgs, chartId, state) {
  this.send_updateChartState(platformArgs, chartId, state);
  return this.recv_updateChartState();
};

XiaohaChartWebapiClient.prototype.send_updateChartState = function(platformArgs, chartId, state) {
  this.output.writeMessageBegin('updateChartState', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_updateChartState_args();
  args.platformArgs = platformArgs;
  args.chartId = chartId;
  args.state = state;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_updateChartState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_updateChartState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateChartState failed: unknown result';
};
XiaohaChartWebapiClient.prototype.reqTags = function(platformArgs) {
  this.send_reqTags(platformArgs);
  return this.recv_reqTags();
};

XiaohaChartWebapiClient.prototype.send_reqTags = function(platformArgs) {
  this.output.writeMessageBegin('reqTags', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_reqTags_args();
  args.platformArgs = platformArgs;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_reqTags = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_reqTags_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reqTags failed: unknown result';
};
XiaohaChartWebapiClient.prototype.reqPlates = function(platformArgs) {
  this.send_reqPlates(platformArgs);
  return this.recv_reqPlates();
};

XiaohaChartWebapiClient.prototype.send_reqPlates = function(platformArgs) {
  this.output.writeMessageBegin('reqPlates', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_reqPlates_args();
  args.platformArgs = platformArgs;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_reqPlates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_reqPlates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reqPlates failed: unknown result';
};
XiaohaChartWebapiClient.prototype.removeTag = function(platformArgs, tagId) {
  this.send_removeTag(platformArgs, tagId);
  return this.recv_removeTag();
};

XiaohaChartWebapiClient.prototype.send_removeTag = function(platformArgs, tagId) {
  this.output.writeMessageBegin('removeTag', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_removeTag_args();
  args.platformArgs = platformArgs;
  args.tagId = tagId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_removeTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_removeTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeTag failed: unknown result';
};
XiaohaChartWebapiClient.prototype.updateTag = function(platformArgs, tag) {
  this.send_updateTag(platformArgs, tag);
  return this.recv_updateTag();
};

XiaohaChartWebapiClient.prototype.send_updateTag = function(platformArgs, tag) {
  this.output.writeMessageBegin('updateTag', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_updateTag_args();
  args.platformArgs = platformArgs;
  args.tag = tag;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_updateTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_updateTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateTag failed: unknown result';
};
XiaohaChartWebapiClient.prototype.addTag = function(platformArgs, tag) {
  this.send_addTag(platformArgs, tag);
  return this.recv_addTag();
};

XiaohaChartWebapiClient.prototype.send_addTag = function(platformArgs, tag) {
  this.output.writeMessageBegin('addTag', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_addTag_args();
  args.platformArgs = platformArgs;
  args.tag = tag;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_addTag = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_addTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addTag failed: unknown result';
};
XiaohaChartWebapiClient.prototype.reqTagPage = function(platformArgs, option, pageOption) {
  this.send_reqTagPage(platformArgs, option, pageOption);
  return this.recv_reqTagPage();
};

XiaohaChartWebapiClient.prototype.send_reqTagPage = function(platformArgs, option, pageOption) {
  this.output.writeMessageBegin('reqTagPage', Thrift.MessageType.CALL, this.seqid);
  var args = new XiaohaChartWebapi_reqTagPage_args();
  args.platformArgs = platformArgs;
  args.option = option;
  args.pageOption = pageOption;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

XiaohaChartWebapiClient.prototype.recv_reqTagPage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XiaohaChartWebapi_reqTagPage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reqTagPage failed: unknown result';
};
