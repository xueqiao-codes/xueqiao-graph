/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.graph.xiaoha.chart.terminal.ao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class XiaohaChartTerminalAo {

  /**
   * 此对外接口需要统一错误码信息
   * 使用ERROR CODE 范围区分不同服务的错误码信息：
   * personal_user_dao : 1000 - 1999
   * xiaoha_chart_dao : 2000 - 2999
   * token : 3000-3999
   */
  public interface Iface {

    /**
     * 登录
     * 
     * @param platformArgs
     * @param loginReq
     */
    public XiaohaChartLandingInfo login(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, LoginReq loginReq) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void logout(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 通过雪橇app登录信息授权
     * 
     * @param platformArgs
     * @param appSession
     */
    public XiaohaChartLandingInfo authorizeXueQiaoApp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XueQiaoAppSession appSession) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public XiaohaChartLandingInfo signUp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, SignUpReq signUpReq) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询小哈图表文件夹
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage reqChartFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询图表
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage reqChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 添加个人用户的收藏夹
     * 
     * @param platformArgs
     * @param landingInfo
     * @param favoriteFolder
     */
    public xueqiao.personal.user.thriftapi.FavoriteFolder addFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public List<xueqiao.personal.user.thriftapi.FavoriteFolder> reqFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void removeFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void renameFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, String newName) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 移动个人用户的收藏文件夹
     * 
     * @param platformArgs
     * @param landingInfo
     * @param folderId
     * @param parentFolderId
     */
    public void moveFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 添加个人用户的图表收藏
     * 
     * @param platformArgs
     * @param landingInfo
     * @param favoriteChart
     */
    public xueqiao.personal.user.thriftapi.FavoriteChart addFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public List<xueqiao.personal.user.thriftapi.FavoriteChart> reqFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void removeFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 移动个人用户的图表收藏
     * 
     * @param platformArgs
     * @param landingInfo
     * @param favoriteChartId
     * @param parentFolderId
     */
    public void moveFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 关联已有账号
     * 
     * @param platformArgs
     * @param landingInfo
     * @param tel
     * @param verifyCode
     */
    public void linkExistAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, String tel, String verifyCode) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public LinkState getLinkState(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void login(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, LoginReq loginReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void logout(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void authorizeXueQiaoApp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XueQiaoAppSession appSession, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void signUp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, SignUpReq signUpReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqChartFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void renameFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, String newName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void moveFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void moveFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void linkExistAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, String tel, String verifyCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLinkState(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public XiaohaChartLandingInfo login(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, LoginReq loginReq) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_login(platformArgs, loginReq);
      return recv_login();
    }

    public void send_login(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, LoginReq loginReq) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setPlatformArgs(platformArgs);
      args.setLoginReq(loginReq);
      sendBase("login", args);
    }

    public XiaohaChartLandingInfo recv_login() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public void logout(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_logout(platformArgs, landingInfo);
      recv_logout();
    }

    public void send_logout(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo) throws org.apache.thrift.TException
    {
      logout_args args = new logout_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      sendBase("logout", args);
    }

    public void recv_logout() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      logout_result result = new logout_result();
      receiveBase(result, "logout");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public XiaohaChartLandingInfo authorizeXueQiaoApp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XueQiaoAppSession appSession) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_authorizeXueQiaoApp(platformArgs, appSession);
      return recv_authorizeXueQiaoApp();
    }

    public void send_authorizeXueQiaoApp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XueQiaoAppSession appSession) throws org.apache.thrift.TException
    {
      authorizeXueQiaoApp_args args = new authorizeXueQiaoApp_args();
      args.setPlatformArgs(platformArgs);
      args.setAppSession(appSession);
      sendBase("authorizeXueQiaoApp", args);
    }

    public XiaohaChartLandingInfo recv_authorizeXueQiaoApp() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      authorizeXueQiaoApp_result result = new authorizeXueQiaoApp_result();
      receiveBase(result, "authorizeXueQiaoApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authorizeXueQiaoApp failed: unknown result");
    }

    public XiaohaChartLandingInfo signUp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, SignUpReq signUpReq) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_signUp(platformArgs, signUpReq);
      return recv_signUp();
    }

    public void send_signUp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, SignUpReq signUpReq) throws org.apache.thrift.TException
    {
      signUp_args args = new signUp_args();
      args.setPlatformArgs(platformArgs);
      args.setSignUpReq(signUpReq);
      sendBase("signUp", args);
    }

    public XiaohaChartLandingInfo recv_signUp() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      signUp_result result = new signUp_result();
      receiveBase(result, "signUp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "signUp failed: unknown result");
    }

    public void sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_sendVerifyCode(platformArgs, tel);
      recv_sendVerifyCode();
    }

    public void send_sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel) throws org.apache.thrift.TException
    {
      sendVerifyCode_args args = new sendVerifyCode_args();
      args.setPlatformArgs(platformArgs);
      args.setTel(tel);
      sendBase("sendVerifyCode", args);
    }

    public void recv_sendVerifyCode() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      sendVerifyCode_result result = new sendVerifyCode_result();
      receiveBase(result, "sendVerifyCode");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage reqChartFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqChartFolder(platformArgs, option, pageOption);
      return recv_reqChartFolder();
    }

    public void send_reqChartFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqChartFolder_args args = new reqChartFolder_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqChartFolder", args);
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage recv_reqChartFolder() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqChartFolder_result result = new reqChartFolder_result();
      receiveBase(result, "reqChartFolder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqChartFolder failed: unknown result");
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage reqChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqChart(platformArgs, option, pageOption);
      return recv_reqChart();
    }

    public void send_reqChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqChart_args args = new reqChart_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqChart", args);
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage recv_reqChart() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqChart_result result = new reqChart_result();
      receiveBase(result, "reqChart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqChart failed: unknown result");
    }

    public xueqiao.personal.user.thriftapi.FavoriteFolder addFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_addFavoriteFolder(platformArgs, landingInfo, favoriteFolder);
      return recv_addFavoriteFolder();
    }

    public void send_addFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder) throws org.apache.thrift.TException
    {
      addFavoriteFolder_args args = new addFavoriteFolder_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setFavoriteFolder(favoriteFolder);
      sendBase("addFavoriteFolder", args);
    }

    public xueqiao.personal.user.thriftapi.FavoriteFolder recv_addFavoriteFolder() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      addFavoriteFolder_result result = new addFavoriteFolder_result();
      receiveBase(result, "addFavoriteFolder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addFavoriteFolder failed: unknown result");
    }

    public List<xueqiao.personal.user.thriftapi.FavoriteFolder> reqFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqFavoriteFolder(platformArgs, landingInfo, option);
      return recv_reqFavoriteFolder();
    }

    public void send_reqFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option) throws org.apache.thrift.TException
    {
      reqFavoriteFolder_args args = new reqFavoriteFolder_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setOption(option);
      sendBase("reqFavoriteFolder", args);
    }

    public List<xueqiao.personal.user.thriftapi.FavoriteFolder> recv_reqFavoriteFolder() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqFavoriteFolder_result result = new reqFavoriteFolder_result();
      receiveBase(result, "reqFavoriteFolder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqFavoriteFolder failed: unknown result");
    }

    public void removeFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_removeFavoriteFolder(platformArgs, landingInfo, folderId);
      recv_removeFavoriteFolder();
    }

    public void send_removeFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId) throws org.apache.thrift.TException
    {
      removeFavoriteFolder_args args = new removeFavoriteFolder_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setFolderId(folderId);
      sendBase("removeFavoriteFolder", args);
    }

    public void recv_removeFavoriteFolder() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      removeFavoriteFolder_result result = new removeFavoriteFolder_result();
      receiveBase(result, "removeFavoriteFolder");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void renameFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, String newName) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_renameFavoriteFolder(platformArgs, landingInfo, folderId, newName);
      recv_renameFavoriteFolder();
    }

    public void send_renameFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, String newName) throws org.apache.thrift.TException
    {
      renameFavoriteFolder_args args = new renameFavoriteFolder_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setFolderId(folderId);
      args.setNewName(newName);
      sendBase("renameFavoriteFolder", args);
    }

    public void recv_renameFavoriteFolder() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      renameFavoriteFolder_result result = new renameFavoriteFolder_result();
      receiveBase(result, "renameFavoriteFolder");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void moveFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_moveFavoriteFolder(platformArgs, landingInfo, folderId, parentFolderId);
      recv_moveFavoriteFolder();
    }

    public void send_moveFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId) throws org.apache.thrift.TException
    {
      moveFavoriteFolder_args args = new moveFavoriteFolder_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setFolderId(folderId);
      args.setParentFolderId(parentFolderId);
      sendBase("moveFavoriteFolder", args);
    }

    public void recv_moveFavoriteFolder() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      moveFavoriteFolder_result result = new moveFavoriteFolder_result();
      receiveBase(result, "moveFavoriteFolder");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public xueqiao.personal.user.thriftapi.FavoriteChart addFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_addFavoriteChart(platformArgs, landingInfo, favoriteChart);
      return recv_addFavoriteChart();
    }

    public void send_addFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart) throws org.apache.thrift.TException
    {
      addFavoriteChart_args args = new addFavoriteChart_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setFavoriteChart(favoriteChart);
      sendBase("addFavoriteChart", args);
    }

    public xueqiao.personal.user.thriftapi.FavoriteChart recv_addFavoriteChart() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      addFavoriteChart_result result = new addFavoriteChart_result();
      receiveBase(result, "addFavoriteChart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addFavoriteChart failed: unknown result");
    }

    public List<xueqiao.personal.user.thriftapi.FavoriteChart> reqFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqFavoriteChart(platformArgs, landingInfo, option);
      return recv_reqFavoriteChart();
    }

    public void send_reqFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option) throws org.apache.thrift.TException
    {
      reqFavoriteChart_args args = new reqFavoriteChart_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setOption(option);
      sendBase("reqFavoriteChart", args);
    }

    public List<xueqiao.personal.user.thriftapi.FavoriteChart> recv_reqFavoriteChart() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqFavoriteChart_result result = new reqFavoriteChart_result();
      receiveBase(result, "reqFavoriteChart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqFavoriteChart failed: unknown result");
    }

    public void removeFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_removeFavoriteChart(platformArgs, landingInfo, favoriteChartId);
      recv_removeFavoriteChart();
    }

    public void send_removeFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId) throws org.apache.thrift.TException
    {
      removeFavoriteChart_args args = new removeFavoriteChart_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setFavoriteChartId(favoriteChartId);
      sendBase("removeFavoriteChart", args);
    }

    public void recv_removeFavoriteChart() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      removeFavoriteChart_result result = new removeFavoriteChart_result();
      receiveBase(result, "removeFavoriteChart");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void moveFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_moveFavoriteChart(platformArgs, landingInfo, favoriteChartId, parentFolderId);
      recv_moveFavoriteChart();
    }

    public void send_moveFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId) throws org.apache.thrift.TException
    {
      moveFavoriteChart_args args = new moveFavoriteChart_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setFavoriteChartId(favoriteChartId);
      args.setParentFolderId(parentFolderId);
      sendBase("moveFavoriteChart", args);
    }

    public void recv_moveFavoriteChart() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      moveFavoriteChart_result result = new moveFavoriteChart_result();
      receiveBase(result, "moveFavoriteChart");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void linkExistAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, String tel, String verifyCode) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_linkExistAccount(platformArgs, landingInfo, tel, verifyCode);
      recv_linkExistAccount();
    }

    public void send_linkExistAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, String tel, String verifyCode) throws org.apache.thrift.TException
    {
      linkExistAccount_args args = new linkExistAccount_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      args.setTel(tel);
      args.setVerifyCode(verifyCode);
      sendBase("linkExistAccount", args);
    }

    public void recv_linkExistAccount() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      linkExistAccount_result result = new linkExistAccount_result();
      receiveBase(result, "linkExistAccount");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public LinkState getLinkState(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_getLinkState(platformArgs, landingInfo);
      return recv_getLinkState();
    }

    public void send_getLinkState(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo) throws org.apache.thrift.TException
    {
      getLinkState_args args = new getLinkState_args();
      args.setPlatformArgs(platformArgs);
      args.setLandingInfo(landingInfo);
      sendBase("getLinkState", args);
    }

    public LinkState recv_getLinkState() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      getLinkState_result result = new getLinkState_result();
      receiveBase(result, "getLinkState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLinkState failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void login(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, LoginReq loginReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(platformArgs, loginReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall <login_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private LoginReq loginReq;
      public login_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, LoginReq loginReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.loginReq = loginReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setPlatformArgs(platformArgs);
        args.setLoginReq(loginReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public XiaohaChartLandingInfo getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void logout(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logout_call method_call = new logout_call(platformArgs, landingInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logout_call extends org.apache.thrift.async.TAsyncMethodCall <logout_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      public logout_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logout_args args = new logout_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_logout();
      }
    }

    public void authorizeXueQiaoApp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XueQiaoAppSession appSession, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authorizeXueQiaoApp_call method_call = new authorizeXueQiaoApp_call(platformArgs, appSession, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authorizeXueQiaoApp_call extends org.apache.thrift.async.TAsyncMethodCall <authorizeXueQiaoApp_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XueQiaoAppSession appSession;
      public authorizeXueQiaoApp_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XueQiaoAppSession appSession, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.appSession = appSession;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authorizeXueQiaoApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authorizeXueQiaoApp_args args = new authorizeXueQiaoApp_args();
        args.setPlatformArgs(platformArgs);
        args.setAppSession(appSession);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public XiaohaChartLandingInfo getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authorizeXueQiaoApp();
      }
    }

    public void signUp(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, SignUpReq signUpReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signUp_call method_call = new signUp_call(platformArgs, signUpReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signUp_call extends org.apache.thrift.async.TAsyncMethodCall <signUp_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private SignUpReq signUpReq;
      public signUp_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, SignUpReq signUpReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.signUpReq = signUpReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signUp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signUp_args args = new signUp_args();
        args.setPlatformArgs(platformArgs);
        args.setSignUpReq(signUpReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public XiaohaChartLandingInfo getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signUp();
      }
    }

    public void sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendVerifyCode_call method_call = new sendVerifyCode_call(platformArgs, tel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendVerifyCode_call extends org.apache.thrift.async.TAsyncMethodCall <sendVerifyCode_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String tel;
      public sendVerifyCode_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.tel = tel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendVerifyCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendVerifyCode_args args = new sendVerifyCode_args();
        args.setPlatformArgs(platformArgs);
        args.setTel(tel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendVerifyCode();
      }
    }

    public void reqChartFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqChartFolder_call method_call = new reqChartFolder_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqChartFolder_call extends org.apache.thrift.async.TAsyncMethodCall <reqChartFolder_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqChartFolder_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqChartFolder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqChartFolder_args args = new reqChartFolder_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqChartFolder();
      }
    }

    public void reqChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqChart_call method_call = new reqChart_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqChart_call extends org.apache.thrift.async.TAsyncMethodCall <reqChart_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqChart_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqChart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqChart_args args = new reqChart_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqChart();
      }
    }

    public void addFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFavoriteFolder_call method_call = new addFavoriteFolder_call(platformArgs, landingInfo, favoriteFolder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFavoriteFolder_call extends org.apache.thrift.async.TAsyncMethodCall <addFavoriteFolder_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder;
      public addFavoriteFolder_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.favoriteFolder = favoriteFolder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFavoriteFolder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFavoriteFolder_args args = new addFavoriteFolder_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setFavoriteFolder(favoriteFolder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.personal.user.thriftapi.FavoriteFolder getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addFavoriteFolder();
      }
    }

    public void reqFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqFavoriteFolder_call method_call = new reqFavoriteFolder_call(platformArgs, landingInfo, option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqFavoriteFolder_call extends org.apache.thrift.async.TAsyncMethodCall <reqFavoriteFolder_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option;
      public reqFavoriteFolder_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqFavoriteFolder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqFavoriteFolder_args args = new reqFavoriteFolder_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<xueqiao.personal.user.thriftapi.FavoriteFolder> getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqFavoriteFolder();
      }
    }

    public void removeFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeFavoriteFolder_call method_call = new removeFavoriteFolder_call(platformArgs, landingInfo, folderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeFavoriteFolder_call extends org.apache.thrift.async.TAsyncMethodCall <removeFavoriteFolder_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private long folderId;
      public removeFavoriteFolder_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.folderId = folderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeFavoriteFolder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeFavoriteFolder_args args = new removeFavoriteFolder_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setFolderId(folderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeFavoriteFolder();
      }
    }

    public void renameFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, String newName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renameFavoriteFolder_call method_call = new renameFavoriteFolder_call(platformArgs, landingInfo, folderId, newName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renameFavoriteFolder_call extends org.apache.thrift.async.TAsyncMethodCall <renameFavoriteFolder_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private long folderId;
      private String newName;
      public renameFavoriteFolder_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, String newName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.folderId = folderId;
        this.newName = newName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameFavoriteFolder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renameFavoriteFolder_args args = new renameFavoriteFolder_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setFolderId(folderId);
        args.setNewName(newName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_renameFavoriteFolder();
      }
    }

    public void moveFavoriteFolder(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      moveFavoriteFolder_call method_call = new moveFavoriteFolder_call(platformArgs, landingInfo, folderId, parentFolderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class moveFavoriteFolder_call extends org.apache.thrift.async.TAsyncMethodCall <moveFavoriteFolder_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private long folderId;
      private long parentFolderId;
      public moveFavoriteFolder_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.folderId = folderId;
        this.parentFolderId = parentFolderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moveFavoriteFolder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        moveFavoriteFolder_args args = new moveFavoriteFolder_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setFolderId(folderId);
        args.setParentFolderId(parentFolderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_moveFavoriteFolder();
      }
    }

    public void addFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFavoriteChart_call method_call = new addFavoriteChart_call(platformArgs, landingInfo, favoriteChart, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFavoriteChart_call extends org.apache.thrift.async.TAsyncMethodCall <addFavoriteChart_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart;
      public addFavoriteChart_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.favoriteChart = favoriteChart;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFavoriteChart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFavoriteChart_args args = new addFavoriteChart_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setFavoriteChart(favoriteChart);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.personal.user.thriftapi.FavoriteChart getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addFavoriteChart();
      }
    }

    public void reqFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqFavoriteChart_call method_call = new reqFavoriteChart_call(platformArgs, landingInfo, option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqFavoriteChart_call extends org.apache.thrift.async.TAsyncMethodCall <reqFavoriteChart_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option;
      public reqFavoriteChart_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqFavoriteChart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqFavoriteChart_args args = new reqFavoriteChart_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<xueqiao.personal.user.thriftapi.FavoriteChart> getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqFavoriteChart();
      }
    }

    public void removeFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeFavoriteChart_call method_call = new removeFavoriteChart_call(platformArgs, landingInfo, favoriteChartId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeFavoriteChart_call extends org.apache.thrift.async.TAsyncMethodCall <removeFavoriteChart_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private long favoriteChartId;
      public removeFavoriteChart_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.favoriteChartId = favoriteChartId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeFavoriteChart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeFavoriteChart_args args = new removeFavoriteChart_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setFavoriteChartId(favoriteChartId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeFavoriteChart();
      }
    }

    public void moveFavoriteChart(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      moveFavoriteChart_call method_call = new moveFavoriteChart_call(platformArgs, landingInfo, favoriteChartId, parentFolderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class moveFavoriteChart_call extends org.apache.thrift.async.TAsyncMethodCall <moveFavoriteChart_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private long favoriteChartId;
      private long parentFolderId;
      public moveFavoriteChart_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.favoriteChartId = favoriteChartId;
        this.parentFolderId = parentFolderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moveFavoriteChart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        moveFavoriteChart_args args = new moveFavoriteChart_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setFavoriteChartId(favoriteChartId);
        args.setParentFolderId(parentFolderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_moveFavoriteChart();
      }
    }

    public void linkExistAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, String tel, String verifyCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      linkExistAccount_call method_call = new linkExistAccount_call(platformArgs, landingInfo, tel, verifyCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class linkExistAccount_call extends org.apache.thrift.async.TAsyncMethodCall <linkExistAccount_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      private String tel;
      private String verifyCode;
      public linkExistAccount_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, String tel, String verifyCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
        this.tel = tel;
        this.verifyCode = verifyCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("linkExistAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        linkExistAccount_args args = new linkExistAccount_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.setTel(tel);
        args.setVerifyCode(verifyCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_linkExistAccount();
      }
    }

    public void getLinkState(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLinkState_call method_call = new getLinkState_call(platformArgs, landingInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLinkState_call extends org.apache.thrift.async.TAsyncMethodCall <getLinkState_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private XiaohaChartLandingInfo landingInfo;
      public getLinkState_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.landingInfo = landingInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLinkState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLinkState_args args = new getLinkState_args();
        args.setPlatformArgs(platformArgs);
        args.setLandingInfo(landingInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LinkState getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLinkState();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("login", new login());
      processMap.put("logout", new logout());
      processMap.put("authorizeXueQiaoApp", new authorizeXueQiaoApp());
      processMap.put("signUp", new signUp());
      processMap.put("sendVerifyCode", new sendVerifyCode());
      processMap.put("reqChartFolder", new reqChartFolder());
      processMap.put("reqChart", new reqChart());
      processMap.put("addFavoriteFolder", new addFavoriteFolder());
      processMap.put("reqFavoriteFolder", new reqFavoriteFolder());
      processMap.put("removeFavoriteFolder", new removeFavoriteFolder());
      processMap.put("renameFavoriteFolder", new renameFavoriteFolder());
      processMap.put("moveFavoriteFolder", new moveFavoriteFolder());
      processMap.put("addFavoriteChart", new addFavoriteChart());
      processMap.put("reqFavoriteChart", new reqFavoriteChart());
      processMap.put("removeFavoriteChart", new removeFavoriteChart());
      processMap.put("moveFavoriteChart", new moveFavoriteChart());
      processMap.put("linkExistAccount", new linkExistAccount());
      processMap.put("getLinkState", new getLinkState());
      return processMap;
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        try {
          result.success = iface.login(args.platformArgs, args.loginReq);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logout_args> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public logout_result getResult(I iface, logout_args args) throws org.apache.thrift.TException {
        logout_result result = new logout_result();
        try {
          iface.logout(args.platformArgs, args.landingInfo);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class authorizeXueQiaoApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authorizeXueQiaoApp_args> {
      public authorizeXueQiaoApp() {
        super("authorizeXueQiaoApp");
      }

      public authorizeXueQiaoApp_args getEmptyArgsInstance() {
        return new authorizeXueQiaoApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authorizeXueQiaoApp_result getResult(I iface, authorizeXueQiaoApp_args args) throws org.apache.thrift.TException {
        authorizeXueQiaoApp_result result = new authorizeXueQiaoApp_result();
        try {
          result.success = iface.authorizeXueQiaoApp(args.platformArgs, args.appSession);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class signUp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signUp_args> {
      public signUp() {
        super("signUp");
      }

      public signUp_args getEmptyArgsInstance() {
        return new signUp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public signUp_result getResult(I iface, signUp_args args) throws org.apache.thrift.TException {
        signUp_result result = new signUp_result();
        try {
          result.success = iface.signUp(args.platformArgs, args.signUpReq);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class sendVerifyCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendVerifyCode_args> {
      public sendVerifyCode() {
        super("sendVerifyCode");
      }

      public sendVerifyCode_args getEmptyArgsInstance() {
        return new sendVerifyCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendVerifyCode_result getResult(I iface, sendVerifyCode_args args) throws org.apache.thrift.TException {
        sendVerifyCode_result result = new sendVerifyCode_result();
        try {
          iface.sendVerifyCode(args.platformArgs, args.tel);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqChartFolder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqChartFolder_args> {
      public reqChartFolder() {
        super("reqChartFolder");
      }

      public reqChartFolder_args getEmptyArgsInstance() {
        return new reqChartFolder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqChartFolder_result getResult(I iface, reqChartFolder_args args) throws org.apache.thrift.TException {
        reqChartFolder_result result = new reqChartFolder_result();
        try {
          result.success = iface.reqChartFolder(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqChart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqChart_args> {
      public reqChart() {
        super("reqChart");
      }

      public reqChart_args getEmptyArgsInstance() {
        return new reqChart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqChart_result getResult(I iface, reqChart_args args) throws org.apache.thrift.TException {
        reqChart_result result = new reqChart_result();
        try {
          result.success = iface.reqChart(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addFavoriteFolder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFavoriteFolder_args> {
      public addFavoriteFolder() {
        super("addFavoriteFolder");
      }

      public addFavoriteFolder_args getEmptyArgsInstance() {
        return new addFavoriteFolder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFavoriteFolder_result getResult(I iface, addFavoriteFolder_args args) throws org.apache.thrift.TException {
        addFavoriteFolder_result result = new addFavoriteFolder_result();
        try {
          result.success = iface.addFavoriteFolder(args.platformArgs, args.landingInfo, args.favoriteFolder);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqFavoriteFolder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqFavoriteFolder_args> {
      public reqFavoriteFolder() {
        super("reqFavoriteFolder");
      }

      public reqFavoriteFolder_args getEmptyArgsInstance() {
        return new reqFavoriteFolder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqFavoriteFolder_result getResult(I iface, reqFavoriteFolder_args args) throws org.apache.thrift.TException {
        reqFavoriteFolder_result result = new reqFavoriteFolder_result();
        try {
          result.success = iface.reqFavoriteFolder(args.platformArgs, args.landingInfo, args.option);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeFavoriteFolder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeFavoriteFolder_args> {
      public removeFavoriteFolder() {
        super("removeFavoriteFolder");
      }

      public removeFavoriteFolder_args getEmptyArgsInstance() {
        return new removeFavoriteFolder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeFavoriteFolder_result getResult(I iface, removeFavoriteFolder_args args) throws org.apache.thrift.TException {
        removeFavoriteFolder_result result = new removeFavoriteFolder_result();
        try {
          iface.removeFavoriteFolder(args.platformArgs, args.landingInfo, args.folderId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class renameFavoriteFolder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renameFavoriteFolder_args> {
      public renameFavoriteFolder() {
        super("renameFavoriteFolder");
      }

      public renameFavoriteFolder_args getEmptyArgsInstance() {
        return new renameFavoriteFolder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public renameFavoriteFolder_result getResult(I iface, renameFavoriteFolder_args args) throws org.apache.thrift.TException {
        renameFavoriteFolder_result result = new renameFavoriteFolder_result();
        try {
          iface.renameFavoriteFolder(args.platformArgs, args.landingInfo, args.folderId, args.newName);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class moveFavoriteFolder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveFavoriteFolder_args> {
      public moveFavoriteFolder() {
        super("moveFavoriteFolder");
      }

      public moveFavoriteFolder_args getEmptyArgsInstance() {
        return new moveFavoriteFolder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moveFavoriteFolder_result getResult(I iface, moveFavoriteFolder_args args) throws org.apache.thrift.TException {
        moveFavoriteFolder_result result = new moveFavoriteFolder_result();
        try {
          iface.moveFavoriteFolder(args.platformArgs, args.landingInfo, args.folderId, args.parentFolderId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addFavoriteChart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFavoriteChart_args> {
      public addFavoriteChart() {
        super("addFavoriteChart");
      }

      public addFavoriteChart_args getEmptyArgsInstance() {
        return new addFavoriteChart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFavoriteChart_result getResult(I iface, addFavoriteChart_args args) throws org.apache.thrift.TException {
        addFavoriteChart_result result = new addFavoriteChart_result();
        try {
          result.success = iface.addFavoriteChart(args.platformArgs, args.landingInfo, args.favoriteChart);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqFavoriteChart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqFavoriteChart_args> {
      public reqFavoriteChart() {
        super("reqFavoriteChart");
      }

      public reqFavoriteChart_args getEmptyArgsInstance() {
        return new reqFavoriteChart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqFavoriteChart_result getResult(I iface, reqFavoriteChart_args args) throws org.apache.thrift.TException {
        reqFavoriteChart_result result = new reqFavoriteChart_result();
        try {
          result.success = iface.reqFavoriteChart(args.platformArgs, args.landingInfo, args.option);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeFavoriteChart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeFavoriteChart_args> {
      public removeFavoriteChart() {
        super("removeFavoriteChart");
      }

      public removeFavoriteChart_args getEmptyArgsInstance() {
        return new removeFavoriteChart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeFavoriteChart_result getResult(I iface, removeFavoriteChart_args args) throws org.apache.thrift.TException {
        removeFavoriteChart_result result = new removeFavoriteChart_result();
        try {
          iface.removeFavoriteChart(args.platformArgs, args.landingInfo, args.favoriteChartId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class moveFavoriteChart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveFavoriteChart_args> {
      public moveFavoriteChart() {
        super("moveFavoriteChart");
      }

      public moveFavoriteChart_args getEmptyArgsInstance() {
        return new moveFavoriteChart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moveFavoriteChart_result getResult(I iface, moveFavoriteChart_args args) throws org.apache.thrift.TException {
        moveFavoriteChart_result result = new moveFavoriteChart_result();
        try {
          iface.moveFavoriteChart(args.platformArgs, args.landingInfo, args.favoriteChartId, args.parentFolderId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class linkExistAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, linkExistAccount_args> {
      public linkExistAccount() {
        super("linkExistAccount");
      }

      public linkExistAccount_args getEmptyArgsInstance() {
        return new linkExistAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public linkExistAccount_result getResult(I iface, linkExistAccount_args args) throws org.apache.thrift.TException {
        linkExistAccount_result result = new linkExistAccount_result();
        try {
          iface.linkExistAccount(args.platformArgs, args.landingInfo, args.tel, args.verifyCode);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getLinkState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLinkState_args> {
      public getLinkState() {
        super("getLinkState");
      }

      public getLinkState_args getEmptyArgsInstance() {
        return new getLinkState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLinkState_result getResult(I iface, getLinkState_args args) throws org.apache.thrift.TException {
        getLinkState_result result = new getLinkState_result();
        try {
          result.success = iface.getLinkState(args.platformArgs, args.landingInfo);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("login", new login());
      processMap.put("logout", new logout());
      processMap.put("authorizeXueQiaoApp", new authorizeXueQiaoApp());
      processMap.put("signUp", new signUp());
      processMap.put("sendVerifyCode", new sendVerifyCode());
      processMap.put("reqChartFolder", new reqChartFolder());
      processMap.put("reqChart", new reqChart());
      processMap.put("addFavoriteFolder", new addFavoriteFolder());
      processMap.put("reqFavoriteFolder", new reqFavoriteFolder());
      processMap.put("removeFavoriteFolder", new removeFavoriteFolder());
      processMap.put("renameFavoriteFolder", new renameFavoriteFolder());
      processMap.put("moveFavoriteFolder", new moveFavoriteFolder());
      processMap.put("addFavoriteChart", new addFavoriteChart());
      processMap.put("reqFavoriteChart", new reqFavoriteChart());
      processMap.put("removeFavoriteChart", new removeFavoriteChart());
      processMap.put("moveFavoriteChart", new moveFavoriteChart());
      processMap.put("linkExistAccount", new linkExistAccount());
      processMap.put("getLinkState", new getLinkState());
      return processMap;
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, XiaohaChartLandingInfo> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public AsyncMethodCallback<XiaohaChartLandingInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<XiaohaChartLandingInfo>() { 
          public void onComplete(XiaohaChartLandingInfo o) {
            login_result result = new login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            login_result result = new login_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<XiaohaChartLandingInfo> resultHandler) throws TException {
        iface.login(args.platformArgs, args.loginReq,resultHandler);
      }
    }

    public static class logout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logout_args, Void> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logout_result result = new logout_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            logout_result result = new logout_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logout_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.logout(args.platformArgs, args.landingInfo,resultHandler);
      }
    }

    public static class authorizeXueQiaoApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authorizeXueQiaoApp_args, XiaohaChartLandingInfo> {
      public authorizeXueQiaoApp() {
        super("authorizeXueQiaoApp");
      }

      public authorizeXueQiaoApp_args getEmptyArgsInstance() {
        return new authorizeXueQiaoApp_args();
      }

      public AsyncMethodCallback<XiaohaChartLandingInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<XiaohaChartLandingInfo>() { 
          public void onComplete(XiaohaChartLandingInfo o) {
            authorizeXueQiaoApp_result result = new authorizeXueQiaoApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authorizeXueQiaoApp_result result = new authorizeXueQiaoApp_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authorizeXueQiaoApp_args args, org.apache.thrift.async.AsyncMethodCallback<XiaohaChartLandingInfo> resultHandler) throws TException {
        iface.authorizeXueQiaoApp(args.platformArgs, args.appSession,resultHandler);
      }
    }

    public static class signUp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signUp_args, XiaohaChartLandingInfo> {
      public signUp() {
        super("signUp");
      }

      public signUp_args getEmptyArgsInstance() {
        return new signUp_args();
      }

      public AsyncMethodCallback<XiaohaChartLandingInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<XiaohaChartLandingInfo>() { 
          public void onComplete(XiaohaChartLandingInfo o) {
            signUp_result result = new signUp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            signUp_result result = new signUp_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signUp_args args, org.apache.thrift.async.AsyncMethodCallback<XiaohaChartLandingInfo> resultHandler) throws TException {
        iface.signUp(args.platformArgs, args.signUpReq,resultHandler);
      }
    }

    public static class sendVerifyCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendVerifyCode_args, Void> {
      public sendVerifyCode() {
        super("sendVerifyCode");
      }

      public sendVerifyCode_args getEmptyArgsInstance() {
        return new sendVerifyCode_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendVerifyCode_result result = new sendVerifyCode_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendVerifyCode_result result = new sendVerifyCode_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendVerifyCode_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendVerifyCode(args.platformArgs, args.tel,resultHandler);
      }
    }

    public static class reqChartFolder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqChartFolder_args, xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage> {
      public reqChartFolder() {
        super("reqChartFolder");
      }

      public reqChartFolder_args getEmptyArgsInstance() {
        return new reqChartFolder_args();
      }

      public AsyncMethodCallback<xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage>() { 
          public void onComplete(xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage o) {
            reqChartFolder_result result = new reqChartFolder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqChartFolder_result result = new reqChartFolder_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqChartFolder_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage> resultHandler) throws TException {
        iface.reqChartFolder(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class reqChart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqChart_args, xueqiao.graph.xiaoha.chart.thriftapi.ChartPage> {
      public reqChart() {
        super("reqChart");
      }

      public reqChart_args getEmptyArgsInstance() {
        return new reqChart_args();
      }

      public AsyncMethodCallback<xueqiao.graph.xiaoha.chart.thriftapi.ChartPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.graph.xiaoha.chart.thriftapi.ChartPage>() { 
          public void onComplete(xueqiao.graph.xiaoha.chart.thriftapi.ChartPage o) {
            reqChart_result result = new reqChart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqChart_result result = new reqChart_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqChart_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.graph.xiaoha.chart.thriftapi.ChartPage> resultHandler) throws TException {
        iface.reqChart(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class addFavoriteFolder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFavoriteFolder_args, xueqiao.personal.user.thriftapi.FavoriteFolder> {
      public addFavoriteFolder() {
        super("addFavoriteFolder");
      }

      public addFavoriteFolder_args getEmptyArgsInstance() {
        return new addFavoriteFolder_args();
      }

      public AsyncMethodCallback<xueqiao.personal.user.thriftapi.FavoriteFolder> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.personal.user.thriftapi.FavoriteFolder>() { 
          public void onComplete(xueqiao.personal.user.thriftapi.FavoriteFolder o) {
            addFavoriteFolder_result result = new addFavoriteFolder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFavoriteFolder_result result = new addFavoriteFolder_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFavoriteFolder_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.personal.user.thriftapi.FavoriteFolder> resultHandler) throws TException {
        iface.addFavoriteFolder(args.platformArgs, args.landingInfo, args.favoriteFolder,resultHandler);
      }
    }

    public static class reqFavoriteFolder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqFavoriteFolder_args, List<xueqiao.personal.user.thriftapi.FavoriteFolder>> {
      public reqFavoriteFolder() {
        super("reqFavoriteFolder");
      }

      public reqFavoriteFolder_args getEmptyArgsInstance() {
        return new reqFavoriteFolder_args();
      }

      public AsyncMethodCallback<List<xueqiao.personal.user.thriftapi.FavoriteFolder>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<xueqiao.personal.user.thriftapi.FavoriteFolder>>() { 
          public void onComplete(List<xueqiao.personal.user.thriftapi.FavoriteFolder> o) {
            reqFavoriteFolder_result result = new reqFavoriteFolder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqFavoriteFolder_result result = new reqFavoriteFolder_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqFavoriteFolder_args args, org.apache.thrift.async.AsyncMethodCallback<List<xueqiao.personal.user.thriftapi.FavoriteFolder>> resultHandler) throws TException {
        iface.reqFavoriteFolder(args.platformArgs, args.landingInfo, args.option,resultHandler);
      }
    }

    public static class removeFavoriteFolder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeFavoriteFolder_args, Void> {
      public removeFavoriteFolder() {
        super("removeFavoriteFolder");
      }

      public removeFavoriteFolder_args getEmptyArgsInstance() {
        return new removeFavoriteFolder_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeFavoriteFolder_result result = new removeFavoriteFolder_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeFavoriteFolder_result result = new removeFavoriteFolder_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeFavoriteFolder_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeFavoriteFolder(args.platformArgs, args.landingInfo, args.folderId,resultHandler);
      }
    }

    public static class renameFavoriteFolder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renameFavoriteFolder_args, Void> {
      public renameFavoriteFolder() {
        super("renameFavoriteFolder");
      }

      public renameFavoriteFolder_args getEmptyArgsInstance() {
        return new renameFavoriteFolder_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            renameFavoriteFolder_result result = new renameFavoriteFolder_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            renameFavoriteFolder_result result = new renameFavoriteFolder_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, renameFavoriteFolder_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.renameFavoriteFolder(args.platformArgs, args.landingInfo, args.folderId, args.newName,resultHandler);
      }
    }

    public static class moveFavoriteFolder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moveFavoriteFolder_args, Void> {
      public moveFavoriteFolder() {
        super("moveFavoriteFolder");
      }

      public moveFavoriteFolder_args getEmptyArgsInstance() {
        return new moveFavoriteFolder_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            moveFavoriteFolder_result result = new moveFavoriteFolder_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            moveFavoriteFolder_result result = new moveFavoriteFolder_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, moveFavoriteFolder_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.moveFavoriteFolder(args.platformArgs, args.landingInfo, args.folderId, args.parentFolderId,resultHandler);
      }
    }

    public static class addFavoriteChart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFavoriteChart_args, xueqiao.personal.user.thriftapi.FavoriteChart> {
      public addFavoriteChart() {
        super("addFavoriteChart");
      }

      public addFavoriteChart_args getEmptyArgsInstance() {
        return new addFavoriteChart_args();
      }

      public AsyncMethodCallback<xueqiao.personal.user.thriftapi.FavoriteChart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.personal.user.thriftapi.FavoriteChart>() { 
          public void onComplete(xueqiao.personal.user.thriftapi.FavoriteChart o) {
            addFavoriteChart_result result = new addFavoriteChart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFavoriteChart_result result = new addFavoriteChart_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFavoriteChart_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.personal.user.thriftapi.FavoriteChart> resultHandler) throws TException {
        iface.addFavoriteChart(args.platformArgs, args.landingInfo, args.favoriteChart,resultHandler);
      }
    }

    public static class reqFavoriteChart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqFavoriteChart_args, List<xueqiao.personal.user.thriftapi.FavoriteChart>> {
      public reqFavoriteChart() {
        super("reqFavoriteChart");
      }

      public reqFavoriteChart_args getEmptyArgsInstance() {
        return new reqFavoriteChart_args();
      }

      public AsyncMethodCallback<List<xueqiao.personal.user.thriftapi.FavoriteChart>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<xueqiao.personal.user.thriftapi.FavoriteChart>>() { 
          public void onComplete(List<xueqiao.personal.user.thriftapi.FavoriteChart> o) {
            reqFavoriteChart_result result = new reqFavoriteChart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqFavoriteChart_result result = new reqFavoriteChart_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqFavoriteChart_args args, org.apache.thrift.async.AsyncMethodCallback<List<xueqiao.personal.user.thriftapi.FavoriteChart>> resultHandler) throws TException {
        iface.reqFavoriteChart(args.platformArgs, args.landingInfo, args.option,resultHandler);
      }
    }

    public static class removeFavoriteChart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeFavoriteChart_args, Void> {
      public removeFavoriteChart() {
        super("removeFavoriteChart");
      }

      public removeFavoriteChart_args getEmptyArgsInstance() {
        return new removeFavoriteChart_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeFavoriteChart_result result = new removeFavoriteChart_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeFavoriteChart_result result = new removeFavoriteChart_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeFavoriteChart_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeFavoriteChart(args.platformArgs, args.landingInfo, args.favoriteChartId,resultHandler);
      }
    }

    public static class moveFavoriteChart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moveFavoriteChart_args, Void> {
      public moveFavoriteChart() {
        super("moveFavoriteChart");
      }

      public moveFavoriteChart_args getEmptyArgsInstance() {
        return new moveFavoriteChart_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            moveFavoriteChart_result result = new moveFavoriteChart_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            moveFavoriteChart_result result = new moveFavoriteChart_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, moveFavoriteChart_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.moveFavoriteChart(args.platformArgs, args.landingInfo, args.favoriteChartId, args.parentFolderId,resultHandler);
      }
    }

    public static class linkExistAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, linkExistAccount_args, Void> {
      public linkExistAccount() {
        super("linkExistAccount");
      }

      public linkExistAccount_args getEmptyArgsInstance() {
        return new linkExistAccount_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            linkExistAccount_result result = new linkExistAccount_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            linkExistAccount_result result = new linkExistAccount_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, linkExistAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.linkExistAccount(args.platformArgs, args.landingInfo, args.tel, args.verifyCode,resultHandler);
      }
    }

    public static class getLinkState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLinkState_args, LinkState> {
      public getLinkState() {
        super("getLinkState");
      }

      public getLinkState_args getEmptyArgsInstance() {
        return new getLinkState_args();
      }

      public AsyncMethodCallback<LinkState> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LinkState>() { 
          public void onComplete(LinkState o) {
            getLinkState_result result = new getLinkState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLinkState_result result = new getLinkState_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLinkState_args args, org.apache.thrift.async.AsyncMethodCallback<LinkState> resultHandler) throws TException {
        iface.getLinkState(args.platformArgs, args.landingInfo,resultHandler);
      }
    }

  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("loginReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public LoginReq loginReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LOGIN_REQ((short)2, "loginReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LOGIN_REQ
            return LOGIN_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LOGIN_REQ, new org.apache.thrift.meta_data.FieldMetaData("loginReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      LoginReq loginReq)
    {
      this();
      this.platformArgs = platformArgs;
      this.loginReq = loginReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLoginReq()) {
        this.loginReq = new LoginReq(other.loginReq);
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.loginReq = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public login_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public LoginReq getLoginReq() {
      return this.loginReq;
    }

    public login_args setLoginReq(LoginReq loginReq) {
      this.loginReq = loginReq;
      return this;
    }

    public void unsetLoginReq() {
      this.loginReq = null;
    }

    /** Returns true if field loginReq is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginReq() {
      return this.loginReq != null;
    }

    public void setLoginReqIsSet(boolean value) {
      if (!value) {
        this.loginReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LOGIN_REQ:
        if (value == null) {
          unsetLoginReq();
        } else {
          setLoginReq((LoginReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LOGIN_REQ:
        return getLoginReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LOGIN_REQ:
        return isSetLoginReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_loginReq = true && this.isSetLoginReq();
      boolean that_present_loginReq = true && that.isSetLoginReq();
      if (this_present_loginReq || that_present_loginReq) {
        if (!(this_present_loginReq && that_present_loginReq))
          return false;
        if (!this.loginReq.equals(that.loginReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginReq()).compareTo(other.isSetLoginReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginReq, other.loginReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginReq:");
      if (this.loginReq == null) {
        sb.append("null");
      } else {
        sb.append(this.loginReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (loginReq != null) {
        loginReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loginReq = new LoginReq();
                struct.loginReq.read(iprot);
                struct.setLoginReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginReq != null) {
          oprot.writeFieldBegin(LOGIN_REQ_FIELD_DESC);
          struct.loginReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLoginReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLoginReq()) {
          struct.loginReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginReq = new LoginReq();
          struct.loginReq.read(iprot);
          struct.setLoginReqIsSet(true);
        }
      }
    }

  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
    }

    public XiaohaChartLandingInfo success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      XiaohaChartLandingInfo success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      if (other.isSetSuccess()) {
        this.success = new XiaohaChartLandingInfo(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public XiaohaChartLandingInfo getSuccess() {
      return this.success;
    }

    public login_result setSuccess(XiaohaChartLandingInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public login_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((XiaohaChartLandingInfo)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new XiaohaChartLandingInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new XiaohaChartLandingInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class logout_args implements org.apache.thrift.TBase<logout_args, logout_args._Fields>, java.io.Serializable, Cloneable, Comparable<logout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logout_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_args.class, metaDataMap);
    }

    public logout_args() {
    }

    public logout_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_args(logout_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
    }

    public logout_args deepCopy() {
      return new logout_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public logout_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public logout_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_args)
        return this.equals((logout_args)that);
      return false;
    }

    public boolean equals(logout_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logout_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_argsStandardSchemeFactory implements SchemeFactory {
      public logout_argsStandardScheme getScheme() {
        return new logout_argsStandardScheme();
      }
    }

    private static class logout_argsStandardScheme extends StandardScheme<logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_argsTupleSchemeFactory implements SchemeFactory {
      public logout_argsTupleScheme getScheme() {
        return new logout_argsTupleScheme();
      }
    }

    private static class logout_argsTupleScheme extends TupleScheme<logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
      }
    }

  }

  public static class logout_result implements org.apache.thrift.TBase<logout_result, logout_result._Fields>, java.io.Serializable, Cloneable, Comparable<logout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logout_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_result.class, metaDataMap);
    }

    public logout_result() {
    }

    public logout_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_result(logout_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public logout_result deepCopy() {
      return new logout_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public logout_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_result)
        return this.equals((logout_result)that);
      return false;
    }

    public boolean equals(logout_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logout_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_resultStandardSchemeFactory implements SchemeFactory {
      public logout_resultStandardScheme getScheme() {
        return new logout_resultStandardScheme();
      }
    }

    private static class logout_resultStandardScheme extends StandardScheme<logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_resultTupleSchemeFactory implements SchemeFactory {
      public logout_resultTupleScheme getScheme() {
        return new logout_resultTupleScheme();
      }
    }

    private static class logout_resultTupleScheme extends TupleScheme<logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class authorizeXueQiaoApp_args implements org.apache.thrift.TBase<authorizeXueQiaoApp_args, authorizeXueQiaoApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<authorizeXueQiaoApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authorizeXueQiaoApp_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField APP_SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appSession", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authorizeXueQiaoApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authorizeXueQiaoApp_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XueQiaoAppSession appSession; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      APP_SESSION((short)2, "appSession");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // APP_SESSION
            return APP_SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.APP_SESSION, new org.apache.thrift.meta_data.FieldMetaData("appSession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XueQiaoAppSession.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authorizeXueQiaoApp_args.class, metaDataMap);
    }

    public authorizeXueQiaoApp_args() {
    }

    public authorizeXueQiaoApp_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XueQiaoAppSession appSession)
    {
      this();
      this.platformArgs = platformArgs;
      this.appSession = appSession;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authorizeXueQiaoApp_args(authorizeXueQiaoApp_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetAppSession()) {
        this.appSession = new XueQiaoAppSession(other.appSession);
      }
    }

    public authorizeXueQiaoApp_args deepCopy() {
      return new authorizeXueQiaoApp_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.appSession = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public authorizeXueQiaoApp_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XueQiaoAppSession getAppSession() {
      return this.appSession;
    }

    public authorizeXueQiaoApp_args setAppSession(XueQiaoAppSession appSession) {
      this.appSession = appSession;
      return this;
    }

    public void unsetAppSession() {
      this.appSession = null;
    }

    /** Returns true if field appSession is set (has been assigned a value) and false otherwise */
    public boolean isSetAppSession() {
      return this.appSession != null;
    }

    public void setAppSessionIsSet(boolean value) {
      if (!value) {
        this.appSession = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case APP_SESSION:
        if (value == null) {
          unsetAppSession();
        } else {
          setAppSession((XueQiaoAppSession)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case APP_SESSION:
        return getAppSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case APP_SESSION:
        return isSetAppSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authorizeXueQiaoApp_args)
        return this.equals((authorizeXueQiaoApp_args)that);
      return false;
    }

    public boolean equals(authorizeXueQiaoApp_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_appSession = true && this.isSetAppSession();
      boolean that_present_appSession = true && that.isSetAppSession();
      if (this_present_appSession || that_present_appSession) {
        if (!(this_present_appSession && that_present_appSession))
          return false;
        if (!this.appSession.equals(that.appSession))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(authorizeXueQiaoApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppSession()).compareTo(other.isSetAppSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appSession, other.appSession);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authorizeXueQiaoApp_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appSession:");
      if (this.appSession == null) {
        sb.append("null");
      } else {
        sb.append(this.appSession);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (appSession != null) {
        appSession.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authorizeXueQiaoApp_argsStandardSchemeFactory implements SchemeFactory {
      public authorizeXueQiaoApp_argsStandardScheme getScheme() {
        return new authorizeXueQiaoApp_argsStandardScheme();
      }
    }

    private static class authorizeXueQiaoApp_argsStandardScheme extends StandardScheme<authorizeXueQiaoApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authorizeXueQiaoApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.appSession = new XueQiaoAppSession();
                struct.appSession.read(iprot);
                struct.setAppSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authorizeXueQiaoApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.appSession != null) {
          oprot.writeFieldBegin(APP_SESSION_FIELD_DESC);
          struct.appSession.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authorizeXueQiaoApp_argsTupleSchemeFactory implements SchemeFactory {
      public authorizeXueQiaoApp_argsTupleScheme getScheme() {
        return new authorizeXueQiaoApp_argsTupleScheme();
      }
    }

    private static class authorizeXueQiaoApp_argsTupleScheme extends TupleScheme<authorizeXueQiaoApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authorizeXueQiaoApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetAppSession()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetAppSession()) {
          struct.appSession.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authorizeXueQiaoApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appSession = new XueQiaoAppSession();
          struct.appSession.read(iprot);
          struct.setAppSessionIsSet(true);
        }
      }
    }

  }

  public static class authorizeXueQiaoApp_result implements org.apache.thrift.TBase<authorizeXueQiaoApp_result, authorizeXueQiaoApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<authorizeXueQiaoApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authorizeXueQiaoApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authorizeXueQiaoApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authorizeXueQiaoApp_resultTupleSchemeFactory());
    }

    public XiaohaChartLandingInfo success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authorizeXueQiaoApp_result.class, metaDataMap);
    }

    public authorizeXueQiaoApp_result() {
    }

    public authorizeXueQiaoApp_result(
      XiaohaChartLandingInfo success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authorizeXueQiaoApp_result(authorizeXueQiaoApp_result other) {
      if (other.isSetSuccess()) {
        this.success = new XiaohaChartLandingInfo(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public authorizeXueQiaoApp_result deepCopy() {
      return new authorizeXueQiaoApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public XiaohaChartLandingInfo getSuccess() {
      return this.success;
    }

    public authorizeXueQiaoApp_result setSuccess(XiaohaChartLandingInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public authorizeXueQiaoApp_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((XiaohaChartLandingInfo)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authorizeXueQiaoApp_result)
        return this.equals((authorizeXueQiaoApp_result)that);
      return false;
    }

    public boolean equals(authorizeXueQiaoApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(authorizeXueQiaoApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authorizeXueQiaoApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authorizeXueQiaoApp_resultStandardSchemeFactory implements SchemeFactory {
      public authorizeXueQiaoApp_resultStandardScheme getScheme() {
        return new authorizeXueQiaoApp_resultStandardScheme();
      }
    }

    private static class authorizeXueQiaoApp_resultStandardScheme extends StandardScheme<authorizeXueQiaoApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authorizeXueQiaoApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new XiaohaChartLandingInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authorizeXueQiaoApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authorizeXueQiaoApp_resultTupleSchemeFactory implements SchemeFactory {
      public authorizeXueQiaoApp_resultTupleScheme getScheme() {
        return new authorizeXueQiaoApp_resultTupleScheme();
      }
    }

    private static class authorizeXueQiaoApp_resultTupleScheme extends TupleScheme<authorizeXueQiaoApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authorizeXueQiaoApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authorizeXueQiaoApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new XiaohaChartLandingInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class signUp_args implements org.apache.thrift.TBase<signUp_args, signUp_args._Fields>, java.io.Serializable, Cloneable, Comparable<signUp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signUp_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SIGN_UP_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("signUpReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signUp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signUp_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public SignUpReq signUpReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SIGN_UP_REQ((short)2, "signUpReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SIGN_UP_REQ
            return SIGN_UP_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SIGN_UP_REQ, new org.apache.thrift.meta_data.FieldMetaData("signUpReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SignUpReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signUp_args.class, metaDataMap);
    }

    public signUp_args() {
    }

    public signUp_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      SignUpReq signUpReq)
    {
      this();
      this.platformArgs = platformArgs;
      this.signUpReq = signUpReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signUp_args(signUp_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetSignUpReq()) {
        this.signUpReq = new SignUpReq(other.signUpReq);
      }
    }

    public signUp_args deepCopy() {
      return new signUp_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.signUpReq = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public signUp_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public SignUpReq getSignUpReq() {
      return this.signUpReq;
    }

    public signUp_args setSignUpReq(SignUpReq signUpReq) {
      this.signUpReq = signUpReq;
      return this;
    }

    public void unsetSignUpReq() {
      this.signUpReq = null;
    }

    /** Returns true if field signUpReq is set (has been assigned a value) and false otherwise */
    public boolean isSetSignUpReq() {
      return this.signUpReq != null;
    }

    public void setSignUpReqIsSet(boolean value) {
      if (!value) {
        this.signUpReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SIGN_UP_REQ:
        if (value == null) {
          unsetSignUpReq();
        } else {
          setSignUpReq((SignUpReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SIGN_UP_REQ:
        return getSignUpReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SIGN_UP_REQ:
        return isSetSignUpReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signUp_args)
        return this.equals((signUp_args)that);
      return false;
    }

    public boolean equals(signUp_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_signUpReq = true && this.isSetSignUpReq();
      boolean that_present_signUpReq = true && that.isSetSignUpReq();
      if (this_present_signUpReq || that_present_signUpReq) {
        if (!(this_present_signUpReq && that_present_signUpReq))
          return false;
        if (!this.signUpReq.equals(that.signUpReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(signUp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSignUpReq()).compareTo(other.isSetSignUpReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSignUpReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signUpReq, other.signUpReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signUp_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("signUpReq:");
      if (this.signUpReq == null) {
        sb.append("null");
      } else {
        sb.append(this.signUpReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (signUpReq != null) {
        signUpReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signUp_argsStandardSchemeFactory implements SchemeFactory {
      public signUp_argsStandardScheme getScheme() {
        return new signUp_argsStandardScheme();
      }
    }

    private static class signUp_argsStandardScheme extends StandardScheme<signUp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signUp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIGN_UP_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.signUpReq = new SignUpReq();
                struct.signUpReq.read(iprot);
                struct.setSignUpReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signUp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.signUpReq != null) {
          oprot.writeFieldBegin(SIGN_UP_REQ_FIELD_DESC);
          struct.signUpReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signUp_argsTupleSchemeFactory implements SchemeFactory {
      public signUp_argsTupleScheme getScheme() {
        return new signUp_argsTupleScheme();
      }
    }

    private static class signUp_argsTupleScheme extends TupleScheme<signUp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signUp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSignUpReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSignUpReq()) {
          struct.signUpReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signUp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.signUpReq = new SignUpReq();
          struct.signUpReq.read(iprot);
          struct.setSignUpReqIsSet(true);
        }
      }
    }

  }

  public static class signUp_result implements org.apache.thrift.TBase<signUp_result, signUp_result._Fields>, java.io.Serializable, Cloneable, Comparable<signUp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signUp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signUp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signUp_resultTupleSchemeFactory());
    }

    public XiaohaChartLandingInfo success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signUp_result.class, metaDataMap);
    }

    public signUp_result() {
    }

    public signUp_result(
      XiaohaChartLandingInfo success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signUp_result(signUp_result other) {
      if (other.isSetSuccess()) {
        this.success = new XiaohaChartLandingInfo(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public signUp_result deepCopy() {
      return new signUp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public XiaohaChartLandingInfo getSuccess() {
      return this.success;
    }

    public signUp_result setSuccess(XiaohaChartLandingInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public signUp_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((XiaohaChartLandingInfo)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signUp_result)
        return this.equals((signUp_result)that);
      return false;
    }

    public boolean equals(signUp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(signUp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signUp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signUp_resultStandardSchemeFactory implements SchemeFactory {
      public signUp_resultStandardScheme getScheme() {
        return new signUp_resultStandardScheme();
      }
    }

    private static class signUp_resultStandardScheme extends StandardScheme<signUp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signUp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new XiaohaChartLandingInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signUp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signUp_resultTupleSchemeFactory implements SchemeFactory {
      public signUp_resultTupleScheme getScheme() {
        return new signUp_resultTupleScheme();
      }
    }

    private static class signUp_resultTupleScheme extends TupleScheme<signUp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signUp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signUp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new XiaohaChartLandingInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class sendVerifyCode_args implements org.apache.thrift.TBase<sendVerifyCode_args, sendVerifyCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendVerifyCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendVerifyCode_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendVerifyCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendVerifyCode_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String tel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      TEL((short)2, "tel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // TEL
            return TEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendVerifyCode_args.class, metaDataMap);
    }

    public sendVerifyCode_args() {
    }

    public sendVerifyCode_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String tel)
    {
      this();
      this.platformArgs = platformArgs;
      this.tel = tel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendVerifyCode_args(sendVerifyCode_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetTel()) {
        this.tel = other.tel;
      }
    }

    public sendVerifyCode_args deepCopy() {
      return new sendVerifyCode_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.tel = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public sendVerifyCode_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getTel() {
      return this.tel;
    }

    public sendVerifyCode_args setTel(String tel) {
      this.tel = tel;
      return this;
    }

    public void unsetTel() {
      this.tel = null;
    }

    /** Returns true if field tel is set (has been assigned a value) and false otherwise */
    public boolean isSetTel() {
      return this.tel != null;
    }

    public void setTelIsSet(boolean value) {
      if (!value) {
        this.tel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case TEL:
        if (value == null) {
          unsetTel();
        } else {
          setTel((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case TEL:
        return getTel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case TEL:
        return isSetTel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendVerifyCode_args)
        return this.equals((sendVerifyCode_args)that);
      return false;
    }

    public boolean equals(sendVerifyCode_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_tel = true && this.isSetTel();
      boolean that_present_tel = true && that.isSetTel();
      if (this_present_tel || that_present_tel) {
        if (!(this_present_tel && that_present_tel))
          return false;
        if (!this.tel.equals(that.tel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendVerifyCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTel()).compareTo(other.isSetTel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, other.tel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendVerifyCode_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tel:");
      if (this.tel == null) {
        sb.append("null");
      } else {
        sb.append(this.tel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendVerifyCode_argsStandardSchemeFactory implements SchemeFactory {
      public sendVerifyCode_argsStandardScheme getScheme() {
        return new sendVerifyCode_argsStandardScheme();
      }
    }

    private static class sendVerifyCode_argsStandardScheme extends StandardScheme<sendVerifyCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendVerifyCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tel = iprot.readString();
                struct.setTelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendVerifyCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tel != null) {
          oprot.writeFieldBegin(TEL_FIELD_DESC);
          oprot.writeString(struct.tel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendVerifyCode_argsTupleSchemeFactory implements SchemeFactory {
      public sendVerifyCode_argsTupleScheme getScheme() {
        return new sendVerifyCode_argsTupleScheme();
      }
    }

    private static class sendVerifyCode_argsTupleScheme extends TupleScheme<sendVerifyCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendVerifyCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetTel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetTel()) {
          oprot.writeString(struct.tel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendVerifyCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tel = iprot.readString();
          struct.setTelIsSet(true);
        }
      }
    }

  }

  public static class sendVerifyCode_result implements org.apache.thrift.TBase<sendVerifyCode_result, sendVerifyCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendVerifyCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendVerifyCode_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendVerifyCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendVerifyCode_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendVerifyCode_result.class, metaDataMap);
    }

    public sendVerifyCode_result() {
    }

    public sendVerifyCode_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendVerifyCode_result(sendVerifyCode_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public sendVerifyCode_result deepCopy() {
      return new sendVerifyCode_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public sendVerifyCode_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendVerifyCode_result)
        return this.equals((sendVerifyCode_result)that);
      return false;
    }

    public boolean equals(sendVerifyCode_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendVerifyCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendVerifyCode_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendVerifyCode_resultStandardSchemeFactory implements SchemeFactory {
      public sendVerifyCode_resultStandardScheme getScheme() {
        return new sendVerifyCode_resultStandardScheme();
      }
    }

    private static class sendVerifyCode_resultStandardScheme extends StandardScheme<sendVerifyCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendVerifyCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendVerifyCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendVerifyCode_resultTupleSchemeFactory implements SchemeFactory {
      public sendVerifyCode_resultTupleScheme getScheme() {
        return new sendVerifyCode_resultTupleScheme();
      }
    }

    private static class sendVerifyCode_resultTupleScheme extends TupleScheme<sendVerifyCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendVerifyCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendVerifyCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqChartFolder_args implements org.apache.thrift.TBase<reqChartFolder_args, reqChartFolder_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqChartFolder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqChartFolder_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqChartFolder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqChartFolder_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)3, "option"),
      PAGE_OPTION((short)4, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 3: // OPTION
            return OPTION;
          case 4: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqChartFolder_args.class, metaDataMap);
    }

    public reqChartFolder_args() {
    }

    public reqChartFolder_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqChartFolder_args(reqChartFolder_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqChartFolder_args deepCopy() {
      return new reqChartFolder_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqChartFolder_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption getOption() {
      return this.option;
    }

    public reqChartFolder_args setOption(xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqChartFolder_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqChartFolder_args)
        return this.equals((reqChartFolder_args)that);
      return false;
    }

    public boolean equals(reqChartFolder_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqChartFolder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqChartFolder_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqChartFolder_argsStandardSchemeFactory implements SchemeFactory {
      public reqChartFolder_argsStandardScheme getScheme() {
        return new reqChartFolder_argsStandardScheme();
      }
    }

    private static class reqChartFolder_argsStandardScheme extends StandardScheme<reqChartFolder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqChartFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqChartFolder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqChartFolder_argsTupleSchemeFactory implements SchemeFactory {
      public reqChartFolder_argsTupleScheme getScheme() {
        return new reqChartFolder_argsTupleScheme();
      }
    }

    private static class reqChartFolder_argsTupleScheme extends TupleScheme<reqChartFolder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqChartFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqChartFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqChartFolder_result implements org.apache.thrift.TBase<reqChartFolder_result, reqChartFolder_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqChartFolder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqChartFolder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqChartFolder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqChartFolder_resultTupleSchemeFactory());
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqChartFolder_result.class, metaDataMap);
    }

    public reqChartFolder_result() {
    }

    public reqChartFolder_result(
      xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqChartFolder_result(reqChartFolder_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqChartFolder_result deepCopy() {
      return new reqChartFolder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage getSuccess() {
      return this.success;
    }

    public reqChartFolder_result setSuccess(xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqChartFolder_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqChartFolder_result)
        return this.equals((reqChartFolder_result)that);
      return false;
    }

    public boolean equals(reqChartFolder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqChartFolder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqChartFolder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqChartFolder_resultStandardSchemeFactory implements SchemeFactory {
      public reqChartFolder_resultStandardScheme getScheme() {
        return new reqChartFolder_resultStandardScheme();
      }
    }

    private static class reqChartFolder_resultStandardScheme extends StandardScheme<reqChartFolder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqChartFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqChartFolder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqChartFolder_resultTupleSchemeFactory implements SchemeFactory {
      public reqChartFolder_resultTupleScheme getScheme() {
        return new reqChartFolder_resultTupleScheme();
      }
    }

    private static class reqChartFolder_resultTupleScheme extends TupleScheme<reqChartFolder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqChartFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqChartFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqChart_args implements org.apache.thrift.TBase<reqChart_args, reqChart_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqChart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqChart_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqChart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqChart_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)3, "option"),
      PAGE_OPTION((short)4, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 3: // OPTION
            return OPTION;
          case 4: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqChart_args.class, metaDataMap);
    }

    public reqChart_args() {
    }

    public reqChart_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqChart_args(reqChart_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqChart_args deepCopy() {
      return new reqChart_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqChart_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption getOption() {
      return this.option;
    }

    public reqChart_args setOption(xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqChart_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqChart_args)
        return this.equals((reqChart_args)that);
      return false;
    }

    public boolean equals(reqChart_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqChart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqChart_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqChart_argsStandardSchemeFactory implements SchemeFactory {
      public reqChart_argsStandardScheme getScheme() {
        return new reqChart_argsStandardScheme();
      }
    }

    private static class reqChart_argsStandardScheme extends StandardScheme<reqChart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqChart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqChart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqChart_argsTupleSchemeFactory implements SchemeFactory {
      public reqChart_argsTupleScheme getScheme() {
        return new reqChart_argsTupleScheme();
      }
    }

    private static class reqChart_argsTupleScheme extends TupleScheme<reqChart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqChart_result implements org.apache.thrift.TBase<reqChart_result, reqChart_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqChart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqChart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqChart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqChart_resultTupleSchemeFactory());
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.graph.xiaoha.chart.thriftapi.ChartPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqChart_result.class, metaDataMap);
    }

    public reqChart_result() {
    }

    public reqChart_result(
      xueqiao.graph.xiaoha.chart.thriftapi.ChartPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqChart_result(reqChart_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.graph.xiaoha.chart.thriftapi.ChartPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqChart_result deepCopy() {
      return new reqChart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage getSuccess() {
      return this.success;
    }

    public reqChart_result setSuccess(xueqiao.graph.xiaoha.chart.thriftapi.ChartPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqChart_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.graph.xiaoha.chart.thriftapi.ChartPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqChart_result)
        return this.equals((reqChart_result)that);
      return false;
    }

    public boolean equals(reqChart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqChart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqChart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqChart_resultStandardSchemeFactory implements SchemeFactory {
      public reqChart_resultStandardScheme getScheme() {
        return new reqChart_resultStandardScheme();
      }
    }

    private static class reqChart_resultStandardScheme extends StandardScheme<reqChart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqChart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.graph.xiaoha.chart.thriftapi.ChartPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqChart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqChart_resultTupleSchemeFactory implements SchemeFactory {
      public reqChart_resultTupleScheme getScheme() {
        return new reqChart_resultTupleScheme();
      }
    }

    private static class reqChart_resultTupleScheme extends TupleScheme<reqChart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.graph.xiaoha.chart.thriftapi.ChartPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class addFavoriteFolder_args implements org.apache.thrift.TBase<addFavoriteFolder_args, addFavoriteFolder_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFavoriteFolder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFavoriteFolder_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FAVORITE_FOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("favoriteFolder", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFavoriteFolder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFavoriteFolder_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      FAVORITE_FOLDER((short)3, "favoriteFolder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // FAVORITE_FOLDER
            return FAVORITE_FOLDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.FAVORITE_FOLDER, new org.apache.thrift.meta_data.FieldMetaData("favoriteFolder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.personal.user.thriftapi.FavoriteFolder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFavoriteFolder_args.class, metaDataMap);
    }

    public addFavoriteFolder_args() {
    }

    public addFavoriteFolder_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.favoriteFolder = favoriteFolder;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFavoriteFolder_args(addFavoriteFolder_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      if (other.isSetFavoriteFolder()) {
        this.favoriteFolder = new xueqiao.personal.user.thriftapi.FavoriteFolder(other.favoriteFolder);
      }
    }

    public addFavoriteFolder_args deepCopy() {
      return new addFavoriteFolder_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      this.favoriteFolder = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public addFavoriteFolder_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public addFavoriteFolder_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public xueqiao.personal.user.thriftapi.FavoriteFolder getFavoriteFolder() {
      return this.favoriteFolder;
    }

    public addFavoriteFolder_args setFavoriteFolder(xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder) {
      this.favoriteFolder = favoriteFolder;
      return this;
    }

    public void unsetFavoriteFolder() {
      this.favoriteFolder = null;
    }

    /** Returns true if field favoriteFolder is set (has been assigned a value) and false otherwise */
    public boolean isSetFavoriteFolder() {
      return this.favoriteFolder != null;
    }

    public void setFavoriteFolderIsSet(boolean value) {
      if (!value) {
        this.favoriteFolder = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case FAVORITE_FOLDER:
        if (value == null) {
          unsetFavoriteFolder();
        } else {
          setFavoriteFolder((xueqiao.personal.user.thriftapi.FavoriteFolder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case FAVORITE_FOLDER:
        return getFavoriteFolder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case FAVORITE_FOLDER:
        return isSetFavoriteFolder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFavoriteFolder_args)
        return this.equals((addFavoriteFolder_args)that);
      return false;
    }

    public boolean equals(addFavoriteFolder_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_favoriteFolder = true && this.isSetFavoriteFolder();
      boolean that_present_favoriteFolder = true && that.isSetFavoriteFolder();
      if (this_present_favoriteFolder || that_present_favoriteFolder) {
        if (!(this_present_favoriteFolder && that_present_favoriteFolder))
          return false;
        if (!this.favoriteFolder.equals(that.favoriteFolder))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addFavoriteFolder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFavoriteFolder()).compareTo(other.isSetFavoriteFolder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFavoriteFolder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favoriteFolder, other.favoriteFolder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFavoriteFolder_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("favoriteFolder:");
      if (this.favoriteFolder == null) {
        sb.append("null");
      } else {
        sb.append(this.favoriteFolder);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
      if (favoriteFolder != null) {
        favoriteFolder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFavoriteFolder_argsStandardSchemeFactory implements SchemeFactory {
      public addFavoriteFolder_argsStandardScheme getScheme() {
        return new addFavoriteFolder_argsStandardScheme();
      }
    }

    private static class addFavoriteFolder_argsStandardScheme extends StandardScheme<addFavoriteFolder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFavoriteFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FAVORITE_FOLDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.favoriteFolder = new xueqiao.personal.user.thriftapi.FavoriteFolder();
                struct.favoriteFolder.read(iprot);
                struct.setFavoriteFolderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFavoriteFolder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.favoriteFolder != null) {
          oprot.writeFieldBegin(FAVORITE_FOLDER_FIELD_DESC);
          struct.favoriteFolder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFavoriteFolder_argsTupleSchemeFactory implements SchemeFactory {
      public addFavoriteFolder_argsTupleScheme getScheme() {
        return new addFavoriteFolder_argsTupleScheme();
      }
    }

    private static class addFavoriteFolder_argsTupleScheme extends TupleScheme<addFavoriteFolder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetFavoriteFolder()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetFavoriteFolder()) {
          struct.favoriteFolder.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.favoriteFolder = new xueqiao.personal.user.thriftapi.FavoriteFolder();
          struct.favoriteFolder.read(iprot);
          struct.setFavoriteFolderIsSet(true);
        }
      }
    }

  }

  public static class addFavoriteFolder_result implements org.apache.thrift.TBase<addFavoriteFolder_result, addFavoriteFolder_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFavoriteFolder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFavoriteFolder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFavoriteFolder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFavoriteFolder_resultTupleSchemeFactory());
    }

    public xueqiao.personal.user.thriftapi.FavoriteFolder success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.personal.user.thriftapi.FavoriteFolder.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFavoriteFolder_result.class, metaDataMap);
    }

    public addFavoriteFolder_result() {
    }

    public addFavoriteFolder_result(
      xueqiao.personal.user.thriftapi.FavoriteFolder success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFavoriteFolder_result(addFavoriteFolder_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.personal.user.thriftapi.FavoriteFolder(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public addFavoriteFolder_result deepCopy() {
      return new addFavoriteFolder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.personal.user.thriftapi.FavoriteFolder getSuccess() {
      return this.success;
    }

    public addFavoriteFolder_result setSuccess(xueqiao.personal.user.thriftapi.FavoriteFolder success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public addFavoriteFolder_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.personal.user.thriftapi.FavoriteFolder)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFavoriteFolder_result)
        return this.equals((addFavoriteFolder_result)that);
      return false;
    }

    public boolean equals(addFavoriteFolder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addFavoriteFolder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFavoriteFolder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFavoriteFolder_resultStandardSchemeFactory implements SchemeFactory {
      public addFavoriteFolder_resultStandardScheme getScheme() {
        return new addFavoriteFolder_resultStandardScheme();
      }
    }

    private static class addFavoriteFolder_resultStandardScheme extends StandardScheme<addFavoriteFolder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFavoriteFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.personal.user.thriftapi.FavoriteFolder();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFavoriteFolder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFavoriteFolder_resultTupleSchemeFactory implements SchemeFactory {
      public addFavoriteFolder_resultTupleScheme getScheme() {
        return new addFavoriteFolder_resultTupleScheme();
      }
    }

    private static class addFavoriteFolder_resultTupleScheme extends TupleScheme<addFavoriteFolder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.personal.user.thriftapi.FavoriteFolder();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqFavoriteFolder_args implements org.apache.thrift.TBase<reqFavoriteFolder_args, reqFavoriteFolder_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqFavoriteFolder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqFavoriteFolder_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqFavoriteFolder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqFavoriteFolder_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      OPTION((short)3, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqFavoriteFolder_args.class, metaDataMap);
    }

    public reqFavoriteFolder_args() {
    }

    public reqFavoriteFolder_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqFavoriteFolder_args(reqFavoriteFolder_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption(other.option);
      }
    }

    public reqFavoriteFolder_args deepCopy() {
      return new reqFavoriteFolder_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      this.option = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqFavoriteFolder_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public reqFavoriteFolder_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption getOption() {
      return this.option;
    }

    public reqFavoriteFolder_args setOption(xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqFavoriteFolder_args)
        return this.equals((reqFavoriteFolder_args)that);
      return false;
    }

    public boolean equals(reqFavoriteFolder_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqFavoriteFolder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqFavoriteFolder_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
      if (option != null) {
        option.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqFavoriteFolder_argsStandardSchemeFactory implements SchemeFactory {
      public reqFavoriteFolder_argsStandardScheme getScheme() {
        return new reqFavoriteFolder_argsStandardScheme();
      }
    }

    private static class reqFavoriteFolder_argsStandardScheme extends StandardScheme<reqFavoriteFolder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqFavoriteFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqFavoriteFolder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqFavoriteFolder_argsTupleSchemeFactory implements SchemeFactory {
      public reqFavoriteFolder_argsTupleScheme getScheme() {
        return new reqFavoriteFolder_argsTupleScheme();
      }
    }

    private static class reqFavoriteFolder_argsTupleScheme extends TupleScheme<reqFavoriteFolder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.option = new xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class reqFavoriteFolder_result implements org.apache.thrift.TBase<reqFavoriteFolder_result, reqFavoriteFolder_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqFavoriteFolder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqFavoriteFolder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqFavoriteFolder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqFavoriteFolder_resultTupleSchemeFactory());
    }

    public List<xueqiao.personal.user.thriftapi.FavoriteFolder> success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.personal.user.thriftapi.FavoriteFolder.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqFavoriteFolder_result.class, metaDataMap);
    }

    public reqFavoriteFolder_result() {
    }

    public reqFavoriteFolder_result(
      List<xueqiao.personal.user.thriftapi.FavoriteFolder> success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqFavoriteFolder_result(reqFavoriteFolder_result other) {
      if (other.isSetSuccess()) {
        List<xueqiao.personal.user.thriftapi.FavoriteFolder> __this__success = new ArrayList<xueqiao.personal.user.thriftapi.FavoriteFolder>(other.success.size());
        for (xueqiao.personal.user.thriftapi.FavoriteFolder other_element : other.success) {
          __this__success.add(new xueqiao.personal.user.thriftapi.FavoriteFolder(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqFavoriteFolder_result deepCopy() {
      return new reqFavoriteFolder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<xueqiao.personal.user.thriftapi.FavoriteFolder> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(xueqiao.personal.user.thriftapi.FavoriteFolder elem) {
      if (this.success == null) {
        this.success = new ArrayList<xueqiao.personal.user.thriftapi.FavoriteFolder>();
      }
      this.success.add(elem);
    }

    public List<xueqiao.personal.user.thriftapi.FavoriteFolder> getSuccess() {
      return this.success;
    }

    public reqFavoriteFolder_result setSuccess(List<xueqiao.personal.user.thriftapi.FavoriteFolder> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqFavoriteFolder_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<xueqiao.personal.user.thriftapi.FavoriteFolder>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqFavoriteFolder_result)
        return this.equals((reqFavoriteFolder_result)that);
      return false;
    }

    public boolean equals(reqFavoriteFolder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqFavoriteFolder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqFavoriteFolder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqFavoriteFolder_resultStandardSchemeFactory implements SchemeFactory {
      public reqFavoriteFolder_resultStandardScheme getScheme() {
        return new reqFavoriteFolder_resultStandardScheme();
      }
    }

    private static class reqFavoriteFolder_resultStandardScheme extends StandardScheme<reqFavoriteFolder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqFavoriteFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<xueqiao.personal.user.thriftapi.FavoriteFolder>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    xueqiao.personal.user.thriftapi.FavoriteFolder _elem2;
                    _elem2 = new xueqiao.personal.user.thriftapi.FavoriteFolder();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqFavoriteFolder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (xueqiao.personal.user.thriftapi.FavoriteFolder _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqFavoriteFolder_resultTupleSchemeFactory implements SchemeFactory {
      public reqFavoriteFolder_resultTupleScheme getScheme() {
        return new reqFavoriteFolder_resultTupleScheme();
      }
    }

    private static class reqFavoriteFolder_resultTupleScheme extends TupleScheme<reqFavoriteFolder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (xueqiao.personal.user.thriftapi.FavoriteFolder _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<xueqiao.personal.user.thriftapi.FavoriteFolder>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              xueqiao.personal.user.thriftapi.FavoriteFolder _elem7;
              _elem7 = new xueqiao.personal.user.thriftapi.FavoriteFolder();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class removeFavoriteFolder_args implements org.apache.thrift.TBase<removeFavoriteFolder_args, removeFavoriteFolder_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeFavoriteFolder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFavoriteFolder_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("folderId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFavoriteFolder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFavoriteFolder_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public long folderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      FOLDER_ID((short)3, "folderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // FOLDER_ID
            return FOLDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FOLDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("folderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFavoriteFolder_args.class, metaDataMap);
    }

    public removeFavoriteFolder_args() {
    }

    public removeFavoriteFolder_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      long folderId)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.folderId = folderId;
      setFolderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFavoriteFolder_args(removeFavoriteFolder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      this.folderId = other.folderId;
    }

    public removeFavoriteFolder_args deepCopy() {
      return new removeFavoriteFolder_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      setFolderIdIsSet(false);
      this.folderId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public removeFavoriteFolder_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public removeFavoriteFolder_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public long getFolderId() {
      return this.folderId;
    }

    public removeFavoriteFolder_args setFolderId(long folderId) {
      this.folderId = folderId;
      setFolderIdIsSet(true);
      return this;
    }

    public void unsetFolderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLDERID_ISSET_ID);
    }

    /** Returns true if field folderId is set (has been assigned a value) and false otherwise */
    public boolean isSetFolderId() {
      return EncodingUtils.testBit(__isset_bitfield, __FOLDERID_ISSET_ID);
    }

    public void setFolderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case FOLDER_ID:
        if (value == null) {
          unsetFolderId();
        } else {
          setFolderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case FOLDER_ID:
        return Long.valueOf(getFolderId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case FOLDER_ID:
        return isSetFolderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFavoriteFolder_args)
        return this.equals((removeFavoriteFolder_args)that);
      return false;
    }

    public boolean equals(removeFavoriteFolder_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_folderId = true;
      boolean that_present_folderId = true;
      if (this_present_folderId || that_present_folderId) {
        if (!(this_present_folderId && that_present_folderId))
          return false;
        if (this.folderId != that.folderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeFavoriteFolder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFolderId()).compareTo(other.isSetFolderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFolderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folderId, other.folderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFavoriteFolder_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("folderId:");
      sb.append(this.folderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFavoriteFolder_argsStandardSchemeFactory implements SchemeFactory {
      public removeFavoriteFolder_argsStandardScheme getScheme() {
        return new removeFavoriteFolder_argsStandardScheme();
      }
    }

    private static class removeFavoriteFolder_argsStandardScheme extends StandardScheme<removeFavoriteFolder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFavoriteFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FOLDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.folderId = iprot.readI64();
                struct.setFolderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFavoriteFolder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.folderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFavoriteFolder_argsTupleSchemeFactory implements SchemeFactory {
      public removeFavoriteFolder_argsTupleScheme getScheme() {
        return new removeFavoriteFolder_argsTupleScheme();
      }
    }

    private static class removeFavoriteFolder_argsTupleScheme extends TupleScheme<removeFavoriteFolder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetFolderId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetFolderId()) {
          oprot.writeI64(struct.folderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.folderId = iprot.readI64();
          struct.setFolderIdIsSet(true);
        }
      }
    }

  }

  public static class removeFavoriteFolder_result implements org.apache.thrift.TBase<removeFavoriteFolder_result, removeFavoriteFolder_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeFavoriteFolder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFavoriteFolder_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFavoriteFolder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFavoriteFolder_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFavoriteFolder_result.class, metaDataMap);
    }

    public removeFavoriteFolder_result() {
    }

    public removeFavoriteFolder_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFavoriteFolder_result(removeFavoriteFolder_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public removeFavoriteFolder_result deepCopy() {
      return new removeFavoriteFolder_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public removeFavoriteFolder_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFavoriteFolder_result)
        return this.equals((removeFavoriteFolder_result)that);
      return false;
    }

    public boolean equals(removeFavoriteFolder_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeFavoriteFolder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFavoriteFolder_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFavoriteFolder_resultStandardSchemeFactory implements SchemeFactory {
      public removeFavoriteFolder_resultStandardScheme getScheme() {
        return new removeFavoriteFolder_resultStandardScheme();
      }
    }

    private static class removeFavoriteFolder_resultStandardScheme extends StandardScheme<removeFavoriteFolder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFavoriteFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFavoriteFolder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFavoriteFolder_resultTupleSchemeFactory implements SchemeFactory {
      public removeFavoriteFolder_resultTupleScheme getScheme() {
        return new removeFavoriteFolder_resultTupleScheme();
      }
    }

    private static class removeFavoriteFolder_resultTupleScheme extends TupleScheme<removeFavoriteFolder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class renameFavoriteFolder_args implements org.apache.thrift.TBase<renameFavoriteFolder_args, renameFavoriteFolder_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameFavoriteFolder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameFavoriteFolder_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("folderId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField NEW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newName", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new renameFavoriteFolder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new renameFavoriteFolder_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public long folderId; // required
    public String newName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      FOLDER_ID((short)3, "folderId"),
      NEW_NAME((short)4, "newName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // FOLDER_ID
            return FOLDER_ID;
          case 4: // NEW_NAME
            return NEW_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FOLDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("folderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEW_NAME, new org.apache.thrift.meta_data.FieldMetaData("newName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameFavoriteFolder_args.class, metaDataMap);
    }

    public renameFavoriteFolder_args() {
    }

    public renameFavoriteFolder_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      long folderId,
      String newName)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.folderId = folderId;
      setFolderIdIsSet(true);
      this.newName = newName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameFavoriteFolder_args(renameFavoriteFolder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      this.folderId = other.folderId;
      if (other.isSetNewName()) {
        this.newName = other.newName;
      }
    }

    public renameFavoriteFolder_args deepCopy() {
      return new renameFavoriteFolder_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      setFolderIdIsSet(false);
      this.folderId = 0;
      this.newName = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public renameFavoriteFolder_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public renameFavoriteFolder_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public long getFolderId() {
      return this.folderId;
    }

    public renameFavoriteFolder_args setFolderId(long folderId) {
      this.folderId = folderId;
      setFolderIdIsSet(true);
      return this;
    }

    public void unsetFolderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLDERID_ISSET_ID);
    }

    /** Returns true if field folderId is set (has been assigned a value) and false otherwise */
    public boolean isSetFolderId() {
      return EncodingUtils.testBit(__isset_bitfield, __FOLDERID_ISSET_ID);
    }

    public void setFolderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLDERID_ISSET_ID, value);
    }

    public String getNewName() {
      return this.newName;
    }

    public renameFavoriteFolder_args setNewName(String newName) {
      this.newName = newName;
      return this;
    }

    public void unsetNewName() {
      this.newName = null;
    }

    /** Returns true if field newName is set (has been assigned a value) and false otherwise */
    public boolean isSetNewName() {
      return this.newName != null;
    }

    public void setNewNameIsSet(boolean value) {
      if (!value) {
        this.newName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case FOLDER_ID:
        if (value == null) {
          unsetFolderId();
        } else {
          setFolderId((Long)value);
        }
        break;

      case NEW_NAME:
        if (value == null) {
          unsetNewName();
        } else {
          setNewName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case FOLDER_ID:
        return Long.valueOf(getFolderId());

      case NEW_NAME:
        return getNewName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case FOLDER_ID:
        return isSetFolderId();
      case NEW_NAME:
        return isSetNewName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameFavoriteFolder_args)
        return this.equals((renameFavoriteFolder_args)that);
      return false;
    }

    public boolean equals(renameFavoriteFolder_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_folderId = true;
      boolean that_present_folderId = true;
      if (this_present_folderId || that_present_folderId) {
        if (!(this_present_folderId && that_present_folderId))
          return false;
        if (this.folderId != that.folderId)
          return false;
      }

      boolean this_present_newName = true && this.isSetNewName();
      boolean that_present_newName = true && that.isSetNewName();
      if (this_present_newName || that_present_newName) {
        if (!(this_present_newName && that_present_newName))
          return false;
        if (!this.newName.equals(that.newName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(renameFavoriteFolder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFolderId()).compareTo(other.isSetFolderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFolderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folderId, other.folderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewName()).compareTo(other.isSetNewName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newName, other.newName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameFavoriteFolder_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("folderId:");
      sb.append(this.folderId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newName:");
      if (this.newName == null) {
        sb.append("null");
      } else {
        sb.append(this.newName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameFavoriteFolder_argsStandardSchemeFactory implements SchemeFactory {
      public renameFavoriteFolder_argsStandardScheme getScheme() {
        return new renameFavoriteFolder_argsStandardScheme();
      }
    }

    private static class renameFavoriteFolder_argsStandardScheme extends StandardScheme<renameFavoriteFolder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameFavoriteFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FOLDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.folderId = iprot.readI64();
                struct.setFolderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEW_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newName = iprot.readString();
                struct.setNewNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameFavoriteFolder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.folderId);
        oprot.writeFieldEnd();
        if (struct.newName != null) {
          oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
          oprot.writeString(struct.newName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameFavoriteFolder_argsTupleSchemeFactory implements SchemeFactory {
      public renameFavoriteFolder_argsTupleScheme getScheme() {
        return new renameFavoriteFolder_argsTupleScheme();
      }
    }

    private static class renameFavoriteFolder_argsTupleScheme extends TupleScheme<renameFavoriteFolder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetFolderId()) {
          optionals.set(2);
        }
        if (struct.isSetNewName()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetFolderId()) {
          oprot.writeI64(struct.folderId);
        }
        if (struct.isSetNewName()) {
          oprot.writeString(struct.newName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.folderId = iprot.readI64();
          struct.setFolderIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.newName = iprot.readString();
          struct.setNewNameIsSet(true);
        }
      }
    }

  }

  public static class renameFavoriteFolder_result implements org.apache.thrift.TBase<renameFavoriteFolder_result, renameFavoriteFolder_result._Fields>, java.io.Serializable, Cloneable, Comparable<renameFavoriteFolder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameFavoriteFolder_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new renameFavoriteFolder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new renameFavoriteFolder_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameFavoriteFolder_result.class, metaDataMap);
    }

    public renameFavoriteFolder_result() {
    }

    public renameFavoriteFolder_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameFavoriteFolder_result(renameFavoriteFolder_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public renameFavoriteFolder_result deepCopy() {
      return new renameFavoriteFolder_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public renameFavoriteFolder_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameFavoriteFolder_result)
        return this.equals((renameFavoriteFolder_result)that);
      return false;
    }

    public boolean equals(renameFavoriteFolder_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(renameFavoriteFolder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameFavoriteFolder_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameFavoriteFolder_resultStandardSchemeFactory implements SchemeFactory {
      public renameFavoriteFolder_resultStandardScheme getScheme() {
        return new renameFavoriteFolder_resultStandardScheme();
      }
    }

    private static class renameFavoriteFolder_resultStandardScheme extends StandardScheme<renameFavoriteFolder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameFavoriteFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameFavoriteFolder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameFavoriteFolder_resultTupleSchemeFactory implements SchemeFactory {
      public renameFavoriteFolder_resultTupleScheme getScheme() {
        return new renameFavoriteFolder_resultTupleScheme();
      }
    }

    private static class renameFavoriteFolder_resultTupleScheme extends TupleScheme<renameFavoriteFolder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class moveFavoriteFolder_args implements org.apache.thrift.TBase<moveFavoriteFolder_args, moveFavoriteFolder_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveFavoriteFolder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveFavoriteFolder_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("folderId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PARENT_FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentFolderId", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveFavoriteFolder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveFavoriteFolder_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public long folderId; // required
    public long parentFolderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      FOLDER_ID((short)3, "folderId"),
      PARENT_FOLDER_ID((short)4, "parentFolderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // FOLDER_ID
            return FOLDER_ID;
          case 4: // PARENT_FOLDER_ID
            return PARENT_FOLDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FOLDERID_ISSET_ID = 0;
    private static final int __PARENTFOLDERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("folderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARENT_FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("parentFolderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveFavoriteFolder_args.class, metaDataMap);
    }

    public moveFavoriteFolder_args() {
    }

    public moveFavoriteFolder_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      long folderId,
      long parentFolderId)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.folderId = folderId;
      setFolderIdIsSet(true);
      this.parentFolderId = parentFolderId;
      setParentFolderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveFavoriteFolder_args(moveFavoriteFolder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      this.folderId = other.folderId;
      this.parentFolderId = other.parentFolderId;
    }

    public moveFavoriteFolder_args deepCopy() {
      return new moveFavoriteFolder_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      setFolderIdIsSet(false);
      this.folderId = 0;
      setParentFolderIdIsSet(false);
      this.parentFolderId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public moveFavoriteFolder_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public moveFavoriteFolder_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public long getFolderId() {
      return this.folderId;
    }

    public moveFavoriteFolder_args setFolderId(long folderId) {
      this.folderId = folderId;
      setFolderIdIsSet(true);
      return this;
    }

    public void unsetFolderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLDERID_ISSET_ID);
    }

    /** Returns true if field folderId is set (has been assigned a value) and false otherwise */
    public boolean isSetFolderId() {
      return EncodingUtils.testBit(__isset_bitfield, __FOLDERID_ISSET_ID);
    }

    public void setFolderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLDERID_ISSET_ID, value);
    }

    public long getParentFolderId() {
      return this.parentFolderId;
    }

    public moveFavoriteFolder_args setParentFolderId(long parentFolderId) {
      this.parentFolderId = parentFolderId;
      setParentFolderIdIsSet(true);
      return this;
    }

    public void unsetParentFolderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
    }

    /** Returns true if field parentFolderId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentFolderId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
    }

    public void setParentFolderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case FOLDER_ID:
        if (value == null) {
          unsetFolderId();
        } else {
          setFolderId((Long)value);
        }
        break;

      case PARENT_FOLDER_ID:
        if (value == null) {
          unsetParentFolderId();
        } else {
          setParentFolderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case FOLDER_ID:
        return Long.valueOf(getFolderId());

      case PARENT_FOLDER_ID:
        return Long.valueOf(getParentFolderId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case FOLDER_ID:
        return isSetFolderId();
      case PARENT_FOLDER_ID:
        return isSetParentFolderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveFavoriteFolder_args)
        return this.equals((moveFavoriteFolder_args)that);
      return false;
    }

    public boolean equals(moveFavoriteFolder_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_folderId = true;
      boolean that_present_folderId = true;
      if (this_present_folderId || that_present_folderId) {
        if (!(this_present_folderId && that_present_folderId))
          return false;
        if (this.folderId != that.folderId)
          return false;
      }

      boolean this_present_parentFolderId = true;
      boolean that_present_parentFolderId = true;
      if (this_present_parentFolderId || that_present_parentFolderId) {
        if (!(this_present_parentFolderId && that_present_parentFolderId))
          return false;
        if (this.parentFolderId != that.parentFolderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(moveFavoriteFolder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFolderId()).compareTo(other.isSetFolderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFolderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folderId, other.folderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentFolderId()).compareTo(other.isSetParentFolderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentFolderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentFolderId, other.parentFolderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveFavoriteFolder_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("folderId:");
      sb.append(this.folderId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentFolderId:");
      sb.append(this.parentFolderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveFavoriteFolder_argsStandardSchemeFactory implements SchemeFactory {
      public moveFavoriteFolder_argsStandardScheme getScheme() {
        return new moveFavoriteFolder_argsStandardScheme();
      }
    }

    private static class moveFavoriteFolder_argsStandardScheme extends StandardScheme<moveFavoriteFolder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveFavoriteFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FOLDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.folderId = iprot.readI64();
                struct.setFolderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARENT_FOLDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.parentFolderId = iprot.readI64();
                struct.setParentFolderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveFavoriteFolder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.folderId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARENT_FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.parentFolderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveFavoriteFolder_argsTupleSchemeFactory implements SchemeFactory {
      public moveFavoriteFolder_argsTupleScheme getScheme() {
        return new moveFavoriteFolder_argsTupleScheme();
      }
    }

    private static class moveFavoriteFolder_argsTupleScheme extends TupleScheme<moveFavoriteFolder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetFolderId()) {
          optionals.set(2);
        }
        if (struct.isSetParentFolderId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetFolderId()) {
          oprot.writeI64(struct.folderId);
        }
        if (struct.isSetParentFolderId()) {
          oprot.writeI64(struct.parentFolderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveFavoriteFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.folderId = iprot.readI64();
          struct.setFolderIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.parentFolderId = iprot.readI64();
          struct.setParentFolderIdIsSet(true);
        }
      }
    }

  }

  public static class moveFavoriteFolder_result implements org.apache.thrift.TBase<moveFavoriteFolder_result, moveFavoriteFolder_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveFavoriteFolder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveFavoriteFolder_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveFavoriteFolder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveFavoriteFolder_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveFavoriteFolder_result.class, metaDataMap);
    }

    public moveFavoriteFolder_result() {
    }

    public moveFavoriteFolder_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveFavoriteFolder_result(moveFavoriteFolder_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public moveFavoriteFolder_result deepCopy() {
      return new moveFavoriteFolder_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public moveFavoriteFolder_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveFavoriteFolder_result)
        return this.equals((moveFavoriteFolder_result)that);
      return false;
    }

    public boolean equals(moveFavoriteFolder_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(moveFavoriteFolder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveFavoriteFolder_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveFavoriteFolder_resultStandardSchemeFactory implements SchemeFactory {
      public moveFavoriteFolder_resultStandardScheme getScheme() {
        return new moveFavoriteFolder_resultStandardScheme();
      }
    }

    private static class moveFavoriteFolder_resultStandardScheme extends StandardScheme<moveFavoriteFolder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveFavoriteFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveFavoriteFolder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveFavoriteFolder_resultTupleSchemeFactory implements SchemeFactory {
      public moveFavoriteFolder_resultTupleScheme getScheme() {
        return new moveFavoriteFolder_resultTupleScheme();
      }
    }

    private static class moveFavoriteFolder_resultTupleScheme extends TupleScheme<moveFavoriteFolder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveFavoriteFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class addFavoriteChart_args implements org.apache.thrift.TBase<addFavoriteChart_args, addFavoriteChart_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFavoriteChart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFavoriteChart_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FAVORITE_CHART_FIELD_DESC = new org.apache.thrift.protocol.TField("favoriteChart", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFavoriteChart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFavoriteChart_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      FAVORITE_CHART((short)3, "favoriteChart");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // FAVORITE_CHART
            return FAVORITE_CHART;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.FAVORITE_CHART, new org.apache.thrift.meta_data.FieldMetaData("favoriteChart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.personal.user.thriftapi.FavoriteChart.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFavoriteChart_args.class, metaDataMap);
    }

    public addFavoriteChart_args() {
    }

    public addFavoriteChart_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.favoriteChart = favoriteChart;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFavoriteChart_args(addFavoriteChart_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      if (other.isSetFavoriteChart()) {
        this.favoriteChart = new xueqiao.personal.user.thriftapi.FavoriteChart(other.favoriteChart);
      }
    }

    public addFavoriteChart_args deepCopy() {
      return new addFavoriteChart_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      this.favoriteChart = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public addFavoriteChart_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public addFavoriteChart_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public xueqiao.personal.user.thriftapi.FavoriteChart getFavoriteChart() {
      return this.favoriteChart;
    }

    public addFavoriteChart_args setFavoriteChart(xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart) {
      this.favoriteChart = favoriteChart;
      return this;
    }

    public void unsetFavoriteChart() {
      this.favoriteChart = null;
    }

    /** Returns true if field favoriteChart is set (has been assigned a value) and false otherwise */
    public boolean isSetFavoriteChart() {
      return this.favoriteChart != null;
    }

    public void setFavoriteChartIsSet(boolean value) {
      if (!value) {
        this.favoriteChart = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case FAVORITE_CHART:
        if (value == null) {
          unsetFavoriteChart();
        } else {
          setFavoriteChart((xueqiao.personal.user.thriftapi.FavoriteChart)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case FAVORITE_CHART:
        return getFavoriteChart();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case FAVORITE_CHART:
        return isSetFavoriteChart();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFavoriteChart_args)
        return this.equals((addFavoriteChart_args)that);
      return false;
    }

    public boolean equals(addFavoriteChart_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_favoriteChart = true && this.isSetFavoriteChart();
      boolean that_present_favoriteChart = true && that.isSetFavoriteChart();
      if (this_present_favoriteChart || that_present_favoriteChart) {
        if (!(this_present_favoriteChart && that_present_favoriteChart))
          return false;
        if (!this.favoriteChart.equals(that.favoriteChart))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addFavoriteChart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFavoriteChart()).compareTo(other.isSetFavoriteChart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFavoriteChart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favoriteChart, other.favoriteChart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFavoriteChart_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("favoriteChart:");
      if (this.favoriteChart == null) {
        sb.append("null");
      } else {
        sb.append(this.favoriteChart);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
      if (favoriteChart != null) {
        favoriteChart.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFavoriteChart_argsStandardSchemeFactory implements SchemeFactory {
      public addFavoriteChart_argsStandardScheme getScheme() {
        return new addFavoriteChart_argsStandardScheme();
      }
    }

    private static class addFavoriteChart_argsStandardScheme extends StandardScheme<addFavoriteChart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFavoriteChart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FAVORITE_CHART
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.favoriteChart = new xueqiao.personal.user.thriftapi.FavoriteChart();
                struct.favoriteChart.read(iprot);
                struct.setFavoriteChartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFavoriteChart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.favoriteChart != null) {
          oprot.writeFieldBegin(FAVORITE_CHART_FIELD_DESC);
          struct.favoriteChart.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFavoriteChart_argsTupleSchemeFactory implements SchemeFactory {
      public addFavoriteChart_argsTupleScheme getScheme() {
        return new addFavoriteChart_argsTupleScheme();
      }
    }

    private static class addFavoriteChart_argsTupleScheme extends TupleScheme<addFavoriteChart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFavoriteChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetFavoriteChart()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetFavoriteChart()) {
          struct.favoriteChart.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFavoriteChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.favoriteChart = new xueqiao.personal.user.thriftapi.FavoriteChart();
          struct.favoriteChart.read(iprot);
          struct.setFavoriteChartIsSet(true);
        }
      }
    }

  }

  public static class addFavoriteChart_result implements org.apache.thrift.TBase<addFavoriteChart_result, addFavoriteChart_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFavoriteChart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFavoriteChart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFavoriteChart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFavoriteChart_resultTupleSchemeFactory());
    }

    public xueqiao.personal.user.thriftapi.FavoriteChart success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.personal.user.thriftapi.FavoriteChart.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFavoriteChart_result.class, metaDataMap);
    }

    public addFavoriteChart_result() {
    }

    public addFavoriteChart_result(
      xueqiao.personal.user.thriftapi.FavoriteChart success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFavoriteChart_result(addFavoriteChart_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.personal.user.thriftapi.FavoriteChart(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public addFavoriteChart_result deepCopy() {
      return new addFavoriteChart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.personal.user.thriftapi.FavoriteChart getSuccess() {
      return this.success;
    }

    public addFavoriteChart_result setSuccess(xueqiao.personal.user.thriftapi.FavoriteChart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public addFavoriteChart_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.personal.user.thriftapi.FavoriteChart)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFavoriteChart_result)
        return this.equals((addFavoriteChart_result)that);
      return false;
    }

    public boolean equals(addFavoriteChart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addFavoriteChart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFavoriteChart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFavoriteChart_resultStandardSchemeFactory implements SchemeFactory {
      public addFavoriteChart_resultStandardScheme getScheme() {
        return new addFavoriteChart_resultStandardScheme();
      }
    }

    private static class addFavoriteChart_resultStandardScheme extends StandardScheme<addFavoriteChart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFavoriteChart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.personal.user.thriftapi.FavoriteChart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFavoriteChart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFavoriteChart_resultTupleSchemeFactory implements SchemeFactory {
      public addFavoriteChart_resultTupleScheme getScheme() {
        return new addFavoriteChart_resultTupleScheme();
      }
    }

    private static class addFavoriteChart_resultTupleScheme extends TupleScheme<addFavoriteChart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFavoriteChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFavoriteChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.personal.user.thriftapi.FavoriteChart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqFavoriteChart_args implements org.apache.thrift.TBase<reqFavoriteChart_args, reqFavoriteChart_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqFavoriteChart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqFavoriteChart_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqFavoriteChart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqFavoriteChart_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      OPTION((short)3, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqFavoriteChart_args.class, metaDataMap);
    }

    public reqFavoriteChart_args() {
    }

    public reqFavoriteChart_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqFavoriteChart_args(reqFavoriteChart_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.personal.user.thriftapi.ReqFavoriteChartOption(other.option);
      }
    }

    public reqFavoriteChart_args deepCopy() {
      return new reqFavoriteChart_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      this.option = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqFavoriteChart_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public reqFavoriteChart_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public xueqiao.personal.user.thriftapi.ReqFavoriteChartOption getOption() {
      return this.option;
    }

    public reqFavoriteChart_args setOption(xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.personal.user.thriftapi.ReqFavoriteChartOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqFavoriteChart_args)
        return this.equals((reqFavoriteChart_args)that);
      return false;
    }

    public boolean equals(reqFavoriteChart_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqFavoriteChart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqFavoriteChart_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
      if (option != null) {
        option.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqFavoriteChart_argsStandardSchemeFactory implements SchemeFactory {
      public reqFavoriteChart_argsStandardScheme getScheme() {
        return new reqFavoriteChart_argsStandardScheme();
      }
    }

    private static class reqFavoriteChart_argsStandardScheme extends StandardScheme<reqFavoriteChart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqFavoriteChart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.personal.user.thriftapi.ReqFavoriteChartOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqFavoriteChart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqFavoriteChart_argsTupleSchemeFactory implements SchemeFactory {
      public reqFavoriteChart_argsTupleScheme getScheme() {
        return new reqFavoriteChart_argsTupleScheme();
      }
    }

    private static class reqFavoriteChart_argsTupleScheme extends TupleScheme<reqFavoriteChart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqFavoriteChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqFavoriteChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.option = new xueqiao.personal.user.thriftapi.ReqFavoriteChartOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class reqFavoriteChart_result implements org.apache.thrift.TBase<reqFavoriteChart_result, reqFavoriteChart_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqFavoriteChart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqFavoriteChart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqFavoriteChart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqFavoriteChart_resultTupleSchemeFactory());
    }

    public List<xueqiao.personal.user.thriftapi.FavoriteChart> success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.personal.user.thriftapi.FavoriteChart.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqFavoriteChart_result.class, metaDataMap);
    }

    public reqFavoriteChart_result() {
    }

    public reqFavoriteChart_result(
      List<xueqiao.personal.user.thriftapi.FavoriteChart> success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqFavoriteChart_result(reqFavoriteChart_result other) {
      if (other.isSetSuccess()) {
        List<xueqiao.personal.user.thriftapi.FavoriteChart> __this__success = new ArrayList<xueqiao.personal.user.thriftapi.FavoriteChart>(other.success.size());
        for (xueqiao.personal.user.thriftapi.FavoriteChart other_element : other.success) {
          __this__success.add(new xueqiao.personal.user.thriftapi.FavoriteChart(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqFavoriteChart_result deepCopy() {
      return new reqFavoriteChart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<xueqiao.personal.user.thriftapi.FavoriteChart> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(xueqiao.personal.user.thriftapi.FavoriteChart elem) {
      if (this.success == null) {
        this.success = new ArrayList<xueqiao.personal.user.thriftapi.FavoriteChart>();
      }
      this.success.add(elem);
    }

    public List<xueqiao.personal.user.thriftapi.FavoriteChart> getSuccess() {
      return this.success;
    }

    public reqFavoriteChart_result setSuccess(List<xueqiao.personal.user.thriftapi.FavoriteChart> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqFavoriteChart_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<xueqiao.personal.user.thriftapi.FavoriteChart>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqFavoriteChart_result)
        return this.equals((reqFavoriteChart_result)that);
      return false;
    }

    public boolean equals(reqFavoriteChart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqFavoriteChart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqFavoriteChart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqFavoriteChart_resultStandardSchemeFactory implements SchemeFactory {
      public reqFavoriteChart_resultStandardScheme getScheme() {
        return new reqFavoriteChart_resultStandardScheme();
      }
    }

    private static class reqFavoriteChart_resultStandardScheme extends StandardScheme<reqFavoriteChart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqFavoriteChart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<xueqiao.personal.user.thriftapi.FavoriteChart>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    xueqiao.personal.user.thriftapi.FavoriteChart _elem10;
                    _elem10 = new xueqiao.personal.user.thriftapi.FavoriteChart();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqFavoriteChart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (xueqiao.personal.user.thriftapi.FavoriteChart _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqFavoriteChart_resultTupleSchemeFactory implements SchemeFactory {
      public reqFavoriteChart_resultTupleScheme getScheme() {
        return new reqFavoriteChart_resultTupleScheme();
      }
    }

    private static class reqFavoriteChart_resultTupleScheme extends TupleScheme<reqFavoriteChart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqFavoriteChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (xueqiao.personal.user.thriftapi.FavoriteChart _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqFavoriteChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<xueqiao.personal.user.thriftapi.FavoriteChart>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              xueqiao.personal.user.thriftapi.FavoriteChart _elem15;
              _elem15 = new xueqiao.personal.user.thriftapi.FavoriteChart();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class removeFavoriteChart_args implements org.apache.thrift.TBase<removeFavoriteChart_args, removeFavoriteChart_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeFavoriteChart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFavoriteChart_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FAVORITE_CHART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("favoriteChartId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFavoriteChart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFavoriteChart_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public long favoriteChartId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      FAVORITE_CHART_ID((short)3, "favoriteChartId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // FAVORITE_CHART_ID
            return FAVORITE_CHART_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FAVORITECHARTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.FAVORITE_CHART_ID, new org.apache.thrift.meta_data.FieldMetaData("favoriteChartId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFavoriteChart_args.class, metaDataMap);
    }

    public removeFavoriteChart_args() {
    }

    public removeFavoriteChart_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      long favoriteChartId)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.favoriteChartId = favoriteChartId;
      setFavoriteChartIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFavoriteChart_args(removeFavoriteChart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      this.favoriteChartId = other.favoriteChartId;
    }

    public removeFavoriteChart_args deepCopy() {
      return new removeFavoriteChart_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      setFavoriteChartIdIsSet(false);
      this.favoriteChartId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public removeFavoriteChart_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public removeFavoriteChart_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public long getFavoriteChartId() {
      return this.favoriteChartId;
    }

    public removeFavoriteChart_args setFavoriteChartId(long favoriteChartId) {
      this.favoriteChartId = favoriteChartId;
      setFavoriteChartIdIsSet(true);
      return this;
    }

    public void unsetFavoriteChartId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAVORITECHARTID_ISSET_ID);
    }

    /** Returns true if field favoriteChartId is set (has been assigned a value) and false otherwise */
    public boolean isSetFavoriteChartId() {
      return EncodingUtils.testBit(__isset_bitfield, __FAVORITECHARTID_ISSET_ID);
    }

    public void setFavoriteChartIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAVORITECHARTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case FAVORITE_CHART_ID:
        if (value == null) {
          unsetFavoriteChartId();
        } else {
          setFavoriteChartId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case FAVORITE_CHART_ID:
        return Long.valueOf(getFavoriteChartId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case FAVORITE_CHART_ID:
        return isSetFavoriteChartId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFavoriteChart_args)
        return this.equals((removeFavoriteChart_args)that);
      return false;
    }

    public boolean equals(removeFavoriteChart_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_favoriteChartId = true;
      boolean that_present_favoriteChartId = true;
      if (this_present_favoriteChartId || that_present_favoriteChartId) {
        if (!(this_present_favoriteChartId && that_present_favoriteChartId))
          return false;
        if (this.favoriteChartId != that.favoriteChartId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeFavoriteChart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFavoriteChartId()).compareTo(other.isSetFavoriteChartId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFavoriteChartId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favoriteChartId, other.favoriteChartId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFavoriteChart_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("favoriteChartId:");
      sb.append(this.favoriteChartId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFavoriteChart_argsStandardSchemeFactory implements SchemeFactory {
      public removeFavoriteChart_argsStandardScheme getScheme() {
        return new removeFavoriteChart_argsStandardScheme();
      }
    }

    private static class removeFavoriteChart_argsStandardScheme extends StandardScheme<removeFavoriteChart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFavoriteChart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FAVORITE_CHART_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.favoriteChartId = iprot.readI64();
                struct.setFavoriteChartIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFavoriteChart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FAVORITE_CHART_ID_FIELD_DESC);
        oprot.writeI64(struct.favoriteChartId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFavoriteChart_argsTupleSchemeFactory implements SchemeFactory {
      public removeFavoriteChart_argsTupleScheme getScheme() {
        return new removeFavoriteChart_argsTupleScheme();
      }
    }

    private static class removeFavoriteChart_argsTupleScheme extends TupleScheme<removeFavoriteChart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFavoriteChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetFavoriteChartId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetFavoriteChartId()) {
          oprot.writeI64(struct.favoriteChartId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFavoriteChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.favoriteChartId = iprot.readI64();
          struct.setFavoriteChartIdIsSet(true);
        }
      }
    }

  }

  public static class removeFavoriteChart_result implements org.apache.thrift.TBase<removeFavoriteChart_result, removeFavoriteChart_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeFavoriteChart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFavoriteChart_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFavoriteChart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFavoriteChart_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFavoriteChart_result.class, metaDataMap);
    }

    public removeFavoriteChart_result() {
    }

    public removeFavoriteChart_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFavoriteChart_result(removeFavoriteChart_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public removeFavoriteChart_result deepCopy() {
      return new removeFavoriteChart_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public removeFavoriteChart_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFavoriteChart_result)
        return this.equals((removeFavoriteChart_result)that);
      return false;
    }

    public boolean equals(removeFavoriteChart_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeFavoriteChart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFavoriteChart_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFavoriteChart_resultStandardSchemeFactory implements SchemeFactory {
      public removeFavoriteChart_resultStandardScheme getScheme() {
        return new removeFavoriteChart_resultStandardScheme();
      }
    }

    private static class removeFavoriteChart_resultStandardScheme extends StandardScheme<removeFavoriteChart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFavoriteChart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFavoriteChart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFavoriteChart_resultTupleSchemeFactory implements SchemeFactory {
      public removeFavoriteChart_resultTupleScheme getScheme() {
        return new removeFavoriteChart_resultTupleScheme();
      }
    }

    private static class removeFavoriteChart_resultTupleScheme extends TupleScheme<removeFavoriteChart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFavoriteChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFavoriteChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class moveFavoriteChart_args implements org.apache.thrift.TBase<moveFavoriteChart_args, moveFavoriteChart_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveFavoriteChart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveFavoriteChart_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FAVORITE_CHART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("favoriteChartId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PARENT_FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentFolderId", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveFavoriteChart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveFavoriteChart_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public long favoriteChartId; // required
    public long parentFolderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      FAVORITE_CHART_ID((short)3, "favoriteChartId"),
      PARENT_FOLDER_ID((short)4, "parentFolderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // FAVORITE_CHART_ID
            return FAVORITE_CHART_ID;
          case 4: // PARENT_FOLDER_ID
            return PARENT_FOLDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FAVORITECHARTID_ISSET_ID = 0;
    private static final int __PARENTFOLDERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.FAVORITE_CHART_ID, new org.apache.thrift.meta_data.FieldMetaData("favoriteChartId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARENT_FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("parentFolderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveFavoriteChart_args.class, metaDataMap);
    }

    public moveFavoriteChart_args() {
    }

    public moveFavoriteChart_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      long favoriteChartId,
      long parentFolderId)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.favoriteChartId = favoriteChartId;
      setFavoriteChartIdIsSet(true);
      this.parentFolderId = parentFolderId;
      setParentFolderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveFavoriteChart_args(moveFavoriteChart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      this.favoriteChartId = other.favoriteChartId;
      this.parentFolderId = other.parentFolderId;
    }

    public moveFavoriteChart_args deepCopy() {
      return new moveFavoriteChart_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      setFavoriteChartIdIsSet(false);
      this.favoriteChartId = 0;
      setParentFolderIdIsSet(false);
      this.parentFolderId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public moveFavoriteChart_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public moveFavoriteChart_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public long getFavoriteChartId() {
      return this.favoriteChartId;
    }

    public moveFavoriteChart_args setFavoriteChartId(long favoriteChartId) {
      this.favoriteChartId = favoriteChartId;
      setFavoriteChartIdIsSet(true);
      return this;
    }

    public void unsetFavoriteChartId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAVORITECHARTID_ISSET_ID);
    }

    /** Returns true if field favoriteChartId is set (has been assigned a value) and false otherwise */
    public boolean isSetFavoriteChartId() {
      return EncodingUtils.testBit(__isset_bitfield, __FAVORITECHARTID_ISSET_ID);
    }

    public void setFavoriteChartIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAVORITECHARTID_ISSET_ID, value);
    }

    public long getParentFolderId() {
      return this.parentFolderId;
    }

    public moveFavoriteChart_args setParentFolderId(long parentFolderId) {
      this.parentFolderId = parentFolderId;
      setParentFolderIdIsSet(true);
      return this;
    }

    public void unsetParentFolderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
    }

    /** Returns true if field parentFolderId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentFolderId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
    }

    public void setParentFolderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case FAVORITE_CHART_ID:
        if (value == null) {
          unsetFavoriteChartId();
        } else {
          setFavoriteChartId((Long)value);
        }
        break;

      case PARENT_FOLDER_ID:
        if (value == null) {
          unsetParentFolderId();
        } else {
          setParentFolderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case FAVORITE_CHART_ID:
        return Long.valueOf(getFavoriteChartId());

      case PARENT_FOLDER_ID:
        return Long.valueOf(getParentFolderId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case FAVORITE_CHART_ID:
        return isSetFavoriteChartId();
      case PARENT_FOLDER_ID:
        return isSetParentFolderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveFavoriteChart_args)
        return this.equals((moveFavoriteChart_args)that);
      return false;
    }

    public boolean equals(moveFavoriteChart_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_favoriteChartId = true;
      boolean that_present_favoriteChartId = true;
      if (this_present_favoriteChartId || that_present_favoriteChartId) {
        if (!(this_present_favoriteChartId && that_present_favoriteChartId))
          return false;
        if (this.favoriteChartId != that.favoriteChartId)
          return false;
      }

      boolean this_present_parentFolderId = true;
      boolean that_present_parentFolderId = true;
      if (this_present_parentFolderId || that_present_parentFolderId) {
        if (!(this_present_parentFolderId && that_present_parentFolderId))
          return false;
        if (this.parentFolderId != that.parentFolderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(moveFavoriteChart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFavoriteChartId()).compareTo(other.isSetFavoriteChartId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFavoriteChartId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favoriteChartId, other.favoriteChartId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentFolderId()).compareTo(other.isSetParentFolderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentFolderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentFolderId, other.parentFolderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveFavoriteChart_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("favoriteChartId:");
      sb.append(this.favoriteChartId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentFolderId:");
      sb.append(this.parentFolderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveFavoriteChart_argsStandardSchemeFactory implements SchemeFactory {
      public moveFavoriteChart_argsStandardScheme getScheme() {
        return new moveFavoriteChart_argsStandardScheme();
      }
    }

    private static class moveFavoriteChart_argsStandardScheme extends StandardScheme<moveFavoriteChart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveFavoriteChart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FAVORITE_CHART_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.favoriteChartId = iprot.readI64();
                struct.setFavoriteChartIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARENT_FOLDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.parentFolderId = iprot.readI64();
                struct.setParentFolderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveFavoriteChart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FAVORITE_CHART_ID_FIELD_DESC);
        oprot.writeI64(struct.favoriteChartId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARENT_FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.parentFolderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveFavoriteChart_argsTupleSchemeFactory implements SchemeFactory {
      public moveFavoriteChart_argsTupleScheme getScheme() {
        return new moveFavoriteChart_argsTupleScheme();
      }
    }

    private static class moveFavoriteChart_argsTupleScheme extends TupleScheme<moveFavoriteChart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveFavoriteChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetFavoriteChartId()) {
          optionals.set(2);
        }
        if (struct.isSetParentFolderId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetFavoriteChartId()) {
          oprot.writeI64(struct.favoriteChartId);
        }
        if (struct.isSetParentFolderId()) {
          oprot.writeI64(struct.parentFolderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveFavoriteChart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.favoriteChartId = iprot.readI64();
          struct.setFavoriteChartIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.parentFolderId = iprot.readI64();
          struct.setParentFolderIdIsSet(true);
        }
      }
    }

  }

  public static class moveFavoriteChart_result implements org.apache.thrift.TBase<moveFavoriteChart_result, moveFavoriteChart_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveFavoriteChart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveFavoriteChart_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveFavoriteChart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveFavoriteChart_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveFavoriteChart_result.class, metaDataMap);
    }

    public moveFavoriteChart_result() {
    }

    public moveFavoriteChart_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveFavoriteChart_result(moveFavoriteChart_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public moveFavoriteChart_result deepCopy() {
      return new moveFavoriteChart_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public moveFavoriteChart_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveFavoriteChart_result)
        return this.equals((moveFavoriteChart_result)that);
      return false;
    }

    public boolean equals(moveFavoriteChart_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(moveFavoriteChart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveFavoriteChart_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveFavoriteChart_resultStandardSchemeFactory implements SchemeFactory {
      public moveFavoriteChart_resultStandardScheme getScheme() {
        return new moveFavoriteChart_resultStandardScheme();
      }
    }

    private static class moveFavoriteChart_resultStandardScheme extends StandardScheme<moveFavoriteChart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveFavoriteChart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveFavoriteChart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveFavoriteChart_resultTupleSchemeFactory implements SchemeFactory {
      public moveFavoriteChart_resultTupleScheme getScheme() {
        return new moveFavoriteChart_resultTupleScheme();
      }
    }

    private static class moveFavoriteChart_resultTupleScheme extends TupleScheme<moveFavoriteChart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveFavoriteChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveFavoriteChart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class linkExistAccount_args implements org.apache.thrift.TBase<linkExistAccount_args, linkExistAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<linkExistAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("linkExistAccount_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VERIFY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyCode", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new linkExistAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new linkExistAccount_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required
    public String tel; // required
    public String verifyCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo"),
      TEL((short)3, "tel"),
      VERIFY_CODE((short)4, "verifyCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          case 3: // TEL
            return TEL;
          case 4: // VERIFY_CODE
            return VERIFY_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERIFY_CODE, new org.apache.thrift.meta_data.FieldMetaData("verifyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(linkExistAccount_args.class, metaDataMap);
    }

    public linkExistAccount_args() {
    }

    public linkExistAccount_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo,
      String tel,
      String verifyCode)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
      this.tel = tel;
      this.verifyCode = verifyCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkExistAccount_args(linkExistAccount_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
      if (other.isSetTel()) {
        this.tel = other.tel;
      }
      if (other.isSetVerifyCode()) {
        this.verifyCode = other.verifyCode;
      }
    }

    public linkExistAccount_args deepCopy() {
      return new linkExistAccount_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
      this.tel = null;
      this.verifyCode = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public linkExistAccount_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public linkExistAccount_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public String getTel() {
      return this.tel;
    }

    public linkExistAccount_args setTel(String tel) {
      this.tel = tel;
      return this;
    }

    public void unsetTel() {
      this.tel = null;
    }

    /** Returns true if field tel is set (has been assigned a value) and false otherwise */
    public boolean isSetTel() {
      return this.tel != null;
    }

    public void setTelIsSet(boolean value) {
      if (!value) {
        this.tel = null;
      }
    }

    public String getVerifyCode() {
      return this.verifyCode;
    }

    public linkExistAccount_args setVerifyCode(String verifyCode) {
      this.verifyCode = verifyCode;
      return this;
    }

    public void unsetVerifyCode() {
      this.verifyCode = null;
    }

    /** Returns true if field verifyCode is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifyCode() {
      return this.verifyCode != null;
    }

    public void setVerifyCodeIsSet(boolean value) {
      if (!value) {
        this.verifyCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      case TEL:
        if (value == null) {
          unsetTel();
        } else {
          setTel((String)value);
        }
        break;

      case VERIFY_CODE:
        if (value == null) {
          unsetVerifyCode();
        } else {
          setVerifyCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      case TEL:
        return getTel();

      case VERIFY_CODE:
        return getVerifyCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      case TEL:
        return isSetTel();
      case VERIFY_CODE:
        return isSetVerifyCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkExistAccount_args)
        return this.equals((linkExistAccount_args)that);
      return false;
    }

    public boolean equals(linkExistAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      boolean this_present_tel = true && this.isSetTel();
      boolean that_present_tel = true && that.isSetTel();
      if (this_present_tel || that_present_tel) {
        if (!(this_present_tel && that_present_tel))
          return false;
        if (!this.tel.equals(that.tel))
          return false;
      }

      boolean this_present_verifyCode = true && this.isSetVerifyCode();
      boolean that_present_verifyCode = true && that.isSetVerifyCode();
      if (this_present_verifyCode || that_present_verifyCode) {
        if (!(this_present_verifyCode && that_present_verifyCode))
          return false;
        if (!this.verifyCode.equals(that.verifyCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(linkExistAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTel()).compareTo(other.isSetTel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, other.tel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVerifyCode()).compareTo(other.isSetVerifyCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifyCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyCode, other.verifyCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("linkExistAccount_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tel:");
      if (this.tel == null) {
        sb.append("null");
      } else {
        sb.append(this.tel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifyCode:");
      if (this.verifyCode == null) {
        sb.append("null");
      } else {
        sb.append(this.verifyCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class linkExistAccount_argsStandardSchemeFactory implements SchemeFactory {
      public linkExistAccount_argsStandardScheme getScheme() {
        return new linkExistAccount_argsStandardScheme();
      }
    }

    private static class linkExistAccount_argsStandardScheme extends StandardScheme<linkExistAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, linkExistAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tel = iprot.readString();
                struct.setTelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VERIFY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verifyCode = iprot.readString();
                struct.setVerifyCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, linkExistAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tel != null) {
          oprot.writeFieldBegin(TEL_FIELD_DESC);
          oprot.writeString(struct.tel);
          oprot.writeFieldEnd();
        }
        if (struct.verifyCode != null) {
          oprot.writeFieldBegin(VERIFY_CODE_FIELD_DESC);
          oprot.writeString(struct.verifyCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class linkExistAccount_argsTupleSchemeFactory implements SchemeFactory {
      public linkExistAccount_argsTupleScheme getScheme() {
        return new linkExistAccount_argsTupleScheme();
      }
    }

    private static class linkExistAccount_argsTupleScheme extends TupleScheme<linkExistAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, linkExistAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        if (struct.isSetTel()) {
          optionals.set(2);
        }
        if (struct.isSetVerifyCode()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
        if (struct.isSetTel()) {
          oprot.writeString(struct.tel);
        }
        if (struct.isSetVerifyCode()) {
          oprot.writeString(struct.verifyCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, linkExistAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tel = iprot.readString();
          struct.setTelIsSet(true);
        }
        if (incoming.get(3)) {
          struct.verifyCode = iprot.readString();
          struct.setVerifyCodeIsSet(true);
        }
      }
    }

  }

  public static class linkExistAccount_result implements org.apache.thrift.TBase<linkExistAccount_result, linkExistAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<linkExistAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("linkExistAccount_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new linkExistAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new linkExistAccount_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(linkExistAccount_result.class, metaDataMap);
    }

    public linkExistAccount_result() {
    }

    public linkExistAccount_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkExistAccount_result(linkExistAccount_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public linkExistAccount_result deepCopy() {
      return new linkExistAccount_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public linkExistAccount_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkExistAccount_result)
        return this.equals((linkExistAccount_result)that);
      return false;
    }

    public boolean equals(linkExistAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(linkExistAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("linkExistAccount_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class linkExistAccount_resultStandardSchemeFactory implements SchemeFactory {
      public linkExistAccount_resultStandardScheme getScheme() {
        return new linkExistAccount_resultStandardScheme();
      }
    }

    private static class linkExistAccount_resultStandardScheme extends StandardScheme<linkExistAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, linkExistAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, linkExistAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class linkExistAccount_resultTupleSchemeFactory implements SchemeFactory {
      public linkExistAccount_resultTupleScheme getScheme() {
        return new linkExistAccount_resultTupleScheme();
      }
    }

    private static class linkExistAccount_resultTupleScheme extends TupleScheme<linkExistAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, linkExistAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, linkExistAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class getLinkState_args implements org.apache.thrift.TBase<getLinkState_args, getLinkState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkState_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LANDING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("landingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkState_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public XiaohaChartLandingInfo landingInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LANDING_INFO((short)2, "landingInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LANDING_INFO
            return LANDING_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LANDING_INFO, new org.apache.thrift.meta_data.FieldMetaData("landingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XiaohaChartLandingInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkState_args.class, metaDataMap);
    }

    public getLinkState_args() {
    }

    public getLinkState_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      XiaohaChartLandingInfo landingInfo)
    {
      this();
      this.platformArgs = platformArgs;
      this.landingInfo = landingInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkState_args(getLinkState_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLandingInfo()) {
        this.landingInfo = new XiaohaChartLandingInfo(other.landingInfo);
      }
    }

    public getLinkState_args deepCopy() {
      return new getLinkState_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.landingInfo = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public getLinkState_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public XiaohaChartLandingInfo getLandingInfo() {
      return this.landingInfo;
    }

    public getLinkState_args setLandingInfo(XiaohaChartLandingInfo landingInfo) {
      this.landingInfo = landingInfo;
      return this;
    }

    public void unsetLandingInfo() {
      this.landingInfo = null;
    }

    /** Returns true if field landingInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLandingInfo() {
      return this.landingInfo != null;
    }

    public void setLandingInfoIsSet(boolean value) {
      if (!value) {
        this.landingInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LANDING_INFO:
        if (value == null) {
          unsetLandingInfo();
        } else {
          setLandingInfo((XiaohaChartLandingInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LANDING_INFO:
        return getLandingInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LANDING_INFO:
        return isSetLandingInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkState_args)
        return this.equals((getLinkState_args)that);
      return false;
    }

    public boolean equals(getLinkState_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_landingInfo = true && this.isSetLandingInfo();
      boolean that_present_landingInfo = true && that.isSetLandingInfo();
      if (this_present_landingInfo || that_present_landingInfo) {
        if (!(this_present_landingInfo && that_present_landingInfo))
          return false;
        if (!this.landingInfo.equals(that.landingInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLinkState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLandingInfo()).compareTo(other.isSetLandingInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLandingInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landingInfo, other.landingInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkState_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("landingInfo:");
      if (this.landingInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.landingInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (landingInfo != null) {
        landingInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkState_argsStandardSchemeFactory implements SchemeFactory {
      public getLinkState_argsStandardScheme getScheme() {
        return new getLinkState_argsStandardScheme();
      }
    }

    private static class getLinkState_argsStandardScheme extends StandardScheme<getLinkState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANDING_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.landingInfo = new XiaohaChartLandingInfo();
                struct.landingInfo.read(iprot);
                struct.setLandingInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.landingInfo != null) {
          oprot.writeFieldBegin(LANDING_INFO_FIELD_DESC);
          struct.landingInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkState_argsTupleSchemeFactory implements SchemeFactory {
      public getLinkState_argsTupleScheme getScheme() {
        return new getLinkState_argsTupleScheme();
      }
    }

    private static class getLinkState_argsTupleScheme extends TupleScheme<getLinkState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLandingInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLandingInfo()) {
          struct.landingInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.landingInfo = new XiaohaChartLandingInfo();
          struct.landingInfo.read(iprot);
          struct.setLandingInfoIsSet(true);
        }
      }
    }

  }

  public static class getLinkState_result implements org.apache.thrift.TBase<getLinkState_result, getLinkState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkState_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see LinkState
     */
    public LinkState success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see LinkState
       */
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LinkState.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkState_result.class, metaDataMap);
    }

    public getLinkState_result() {
    }

    public getLinkState_result(
      LinkState success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkState_result(getLinkState_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public getLinkState_result deepCopy() {
      return new getLinkState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    /**
     * 
     * @see LinkState
     */
    public LinkState getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see LinkState
     */
    public getLinkState_result setSuccess(LinkState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public getLinkState_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LinkState)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkState_result)
        return this.equals((getLinkState_result)that);
      return false;
    }

    public boolean equals(getLinkState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLinkState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkState_resultStandardSchemeFactory implements SchemeFactory {
      public getLinkState_resultStandardScheme getScheme() {
        return new getLinkState_resultStandardScheme();
      }
    }

    private static class getLinkState_resultStandardScheme extends StandardScheme<getLinkState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = LinkState.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkState_resultTupleSchemeFactory implements SchemeFactory {
      public getLinkState_resultTupleScheme getScheme() {
        return new getLinkState_resultTupleScheme();
      }
    }

    private static class getLinkState_resultTupleScheme extends TupleScheme<getLinkState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = LinkState.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
