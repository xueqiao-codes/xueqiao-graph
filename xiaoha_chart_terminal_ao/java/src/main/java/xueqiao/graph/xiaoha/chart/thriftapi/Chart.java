/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.graph.xiaoha.chart.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Chart implements org.apache.thrift.TBase<Chart, Chart._Fields>, java.io.Serializable, Cloneable, Comparable<Chart> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chart");

  private static final org.apache.thrift.protocol.TField CHART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chartId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField XIAOHA_OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("xiaohaObjId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHART_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chartName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SHARE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("shareKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARENT_FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentFolderId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CHART_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("chartType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CHART_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("chartState", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField COMMODITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("plate", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChartStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChartTupleSchemeFactory());
  }

  public long chartId; // optional
  public String xiaohaObjId; // optional
  public String chartName; // optional
  public String shareKey; // optional
  public String url; // optional
  public long parentFolderId; // optional
  public Set<String> tags; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional
  /**
   * 
   * @see ChartType
   */
  public ChartType chartType; // optional
  /**
   * 
   * @see ChartState
   */
  public ChartState chartState; // optional
  public String commodityName; // optional
  public String plate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHART_ID((short)1, "chartId"),
    XIAOHA_OBJ_ID((short)2, "xiaohaObjId"),
    CHART_NAME((short)3, "chartName"),
    SHARE_KEY((short)4, "shareKey"),
    URL((short)5, "url"),
    PARENT_FOLDER_ID((short)6, "parentFolderId"),
    TAGS((short)7, "tags"),
    CREATE_TIMESTAMP((short)8, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)9, "lastModifyTimestamp"),
    /**
     * 
     * @see ChartType
     */
    CHART_TYPE((short)10, "chartType"),
    /**
     * 
     * @see ChartState
     */
    CHART_STATE((short)11, "chartState"),
    COMMODITY_NAME((short)12, "commodityName"),
    PLATE((short)13, "plate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHART_ID
          return CHART_ID;
        case 2: // XIAOHA_OBJ_ID
          return XIAOHA_OBJ_ID;
        case 3: // CHART_NAME
          return CHART_NAME;
        case 4: // SHARE_KEY
          return SHARE_KEY;
        case 5: // URL
          return URL;
        case 6: // PARENT_FOLDER_ID
          return PARENT_FOLDER_ID;
        case 7: // TAGS
          return TAGS;
        case 8: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 9: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        case 10: // CHART_TYPE
          return CHART_TYPE;
        case 11: // CHART_STATE
          return CHART_STATE;
        case 12: // COMMODITY_NAME
          return COMMODITY_NAME;
        case 13: // PLATE
          return PLATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARTID_ISSET_ID = 0;
  private static final int __PARENTFOLDERID_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CHART_ID,_Fields.XIAOHA_OBJ_ID,_Fields.CHART_NAME,_Fields.SHARE_KEY,_Fields.URL,_Fields.PARENT_FOLDER_ID,_Fields.TAGS,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP,_Fields.CHART_TYPE,_Fields.CHART_STATE,_Fields.COMMODITY_NAME,_Fields.PLATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHART_ID, new org.apache.thrift.meta_data.FieldMetaData("chartId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.XIAOHA_OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("xiaohaObjId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHART_NAME, new org.apache.thrift.meta_data.FieldMetaData("chartName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_KEY, new org.apache.thrift.meta_data.FieldMetaData("shareKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("parentFolderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHART_TYPE, new org.apache.thrift.meta_data.FieldMetaData("chartType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChartType.class)));
    tmpMap.put(_Fields.CHART_STATE, new org.apache.thrift.meta_data.FieldMetaData("chartState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChartState.class)));
    tmpMap.put(_Fields.COMMODITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("commodityName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATE, new org.apache.thrift.meta_data.FieldMetaData("plate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chart.class, metaDataMap);
  }

  public Chart() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Chart(Chart other) {
    __isset_bitfield = other.__isset_bitfield;
    this.chartId = other.chartId;
    if (other.isSetXiaohaObjId()) {
      this.xiaohaObjId = other.xiaohaObjId;
    }
    if (other.isSetChartName()) {
      this.chartName = other.chartName;
    }
    if (other.isSetShareKey()) {
      this.shareKey = other.shareKey;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.parentFolderId = other.parentFolderId;
    if (other.isSetTags()) {
      Set<String> __this__tags = new HashSet<String>(other.tags);
      this.tags = __this__tags;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
    if (other.isSetChartType()) {
      this.chartType = other.chartType;
    }
    if (other.isSetChartState()) {
      this.chartState = other.chartState;
    }
    if (other.isSetCommodityName()) {
      this.commodityName = other.commodityName;
    }
    if (other.isSetPlate()) {
      this.plate = other.plate;
    }
  }

  public Chart deepCopy() {
    return new Chart(this);
  }

  @Override
  public void clear() {
    setChartIdIsSet(false);
    this.chartId = 0;
    this.xiaohaObjId = null;
    this.chartName = null;
    this.shareKey = null;
    this.url = null;
    setParentFolderIdIsSet(false);
    this.parentFolderId = 0;
    this.tags = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
    this.chartType = null;
    this.chartState = null;
    this.commodityName = null;
    this.plate = null;
  }

  public long getChartId() {
    return this.chartId;
  }

  public Chart setChartId(long chartId) {
    this.chartId = chartId;
    setChartIdIsSet(true);
    return this;
  }

  public void unsetChartId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARTID_ISSET_ID);
  }

  /** Returns true if field chartId is set (has been assigned a value) and false otherwise */
  public boolean isSetChartId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARTID_ISSET_ID);
  }

  public void setChartIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARTID_ISSET_ID, value);
  }

  public String getXiaohaObjId() {
    return this.xiaohaObjId;
  }

  public Chart setXiaohaObjId(String xiaohaObjId) {
    this.xiaohaObjId = xiaohaObjId;
    return this;
  }

  public void unsetXiaohaObjId() {
    this.xiaohaObjId = null;
  }

  /** Returns true if field xiaohaObjId is set (has been assigned a value) and false otherwise */
  public boolean isSetXiaohaObjId() {
    return this.xiaohaObjId != null;
  }

  public void setXiaohaObjIdIsSet(boolean value) {
    if (!value) {
      this.xiaohaObjId = null;
    }
  }

  public String getChartName() {
    return this.chartName;
  }

  public Chart setChartName(String chartName) {
    this.chartName = chartName;
    return this;
  }

  public void unsetChartName() {
    this.chartName = null;
  }

  /** Returns true if field chartName is set (has been assigned a value) and false otherwise */
  public boolean isSetChartName() {
    return this.chartName != null;
  }

  public void setChartNameIsSet(boolean value) {
    if (!value) {
      this.chartName = null;
    }
  }

  public String getShareKey() {
    return this.shareKey;
  }

  public Chart setShareKey(String shareKey) {
    this.shareKey = shareKey;
    return this;
  }

  public void unsetShareKey() {
    this.shareKey = null;
  }

  /** Returns true if field shareKey is set (has been assigned a value) and false otherwise */
  public boolean isSetShareKey() {
    return this.shareKey != null;
  }

  public void setShareKeyIsSet(boolean value) {
    if (!value) {
      this.shareKey = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public Chart setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public long getParentFolderId() {
    return this.parentFolderId;
  }

  public Chart setParentFolderId(long parentFolderId) {
    this.parentFolderId = parentFolderId;
    setParentFolderIdIsSet(true);
    return this;
  }

  public void unsetParentFolderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
  }

  /** Returns true if field parentFolderId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentFolderId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
  }

  public void setParentFolderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID, value);
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new HashSet<String>();
    }
    this.tags.add(elem);
  }

  public Set<String> getTags() {
    return this.tags;
  }

  public Chart setTags(Set<String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public Chart setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public Chart setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see ChartType
   */
  public ChartType getChartType() {
    return this.chartType;
  }

  /**
   * 
   * @see ChartType
   */
  public Chart setChartType(ChartType chartType) {
    this.chartType = chartType;
    return this;
  }

  public void unsetChartType() {
    this.chartType = null;
  }

  /** Returns true if field chartType is set (has been assigned a value) and false otherwise */
  public boolean isSetChartType() {
    return this.chartType != null;
  }

  public void setChartTypeIsSet(boolean value) {
    if (!value) {
      this.chartType = null;
    }
  }

  /**
   * 
   * @see ChartState
   */
  public ChartState getChartState() {
    return this.chartState;
  }

  /**
   * 
   * @see ChartState
   */
  public Chart setChartState(ChartState chartState) {
    this.chartState = chartState;
    return this;
  }

  public void unsetChartState() {
    this.chartState = null;
  }

  /** Returns true if field chartState is set (has been assigned a value) and false otherwise */
  public boolean isSetChartState() {
    return this.chartState != null;
  }

  public void setChartStateIsSet(boolean value) {
    if (!value) {
      this.chartState = null;
    }
  }

  public String getCommodityName() {
    return this.commodityName;
  }

  public Chart setCommodityName(String commodityName) {
    this.commodityName = commodityName;
    return this;
  }

  public void unsetCommodityName() {
    this.commodityName = null;
  }

  /** Returns true if field commodityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityName() {
    return this.commodityName != null;
  }

  public void setCommodityNameIsSet(boolean value) {
    if (!value) {
      this.commodityName = null;
    }
  }

  public String getPlate() {
    return this.plate;
  }

  public Chart setPlate(String plate) {
    this.plate = plate;
    return this;
  }

  public void unsetPlate() {
    this.plate = null;
  }

  /** Returns true if field plate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlate() {
    return this.plate != null;
  }

  public void setPlateIsSet(boolean value) {
    if (!value) {
      this.plate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHART_ID:
      if (value == null) {
        unsetChartId();
      } else {
        setChartId((Long)value);
      }
      break;

    case XIAOHA_OBJ_ID:
      if (value == null) {
        unsetXiaohaObjId();
      } else {
        setXiaohaObjId((String)value);
      }
      break;

    case CHART_NAME:
      if (value == null) {
        unsetChartName();
      } else {
        setChartName((String)value);
      }
      break;

    case SHARE_KEY:
      if (value == null) {
        unsetShareKey();
      } else {
        setShareKey((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case PARENT_FOLDER_ID:
      if (value == null) {
        unsetParentFolderId();
      } else {
        setParentFolderId((Long)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Set<String>)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    case CHART_TYPE:
      if (value == null) {
        unsetChartType();
      } else {
        setChartType((ChartType)value);
      }
      break;

    case CHART_STATE:
      if (value == null) {
        unsetChartState();
      } else {
        setChartState((ChartState)value);
      }
      break;

    case COMMODITY_NAME:
      if (value == null) {
        unsetCommodityName();
      } else {
        setCommodityName((String)value);
      }
      break;

    case PLATE:
      if (value == null) {
        unsetPlate();
      } else {
        setPlate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHART_ID:
      return Long.valueOf(getChartId());

    case XIAOHA_OBJ_ID:
      return getXiaohaObjId();

    case CHART_NAME:
      return getChartName();

    case SHARE_KEY:
      return getShareKey();

    case URL:
      return getUrl();

    case PARENT_FOLDER_ID:
      return Long.valueOf(getParentFolderId());

    case TAGS:
      return getTags();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    case CHART_TYPE:
      return getChartType();

    case CHART_STATE:
      return getChartState();

    case COMMODITY_NAME:
      return getCommodityName();

    case PLATE:
      return getPlate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHART_ID:
      return isSetChartId();
    case XIAOHA_OBJ_ID:
      return isSetXiaohaObjId();
    case CHART_NAME:
      return isSetChartName();
    case SHARE_KEY:
      return isSetShareKey();
    case URL:
      return isSetUrl();
    case PARENT_FOLDER_ID:
      return isSetParentFolderId();
    case TAGS:
      return isSetTags();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    case CHART_TYPE:
      return isSetChartType();
    case CHART_STATE:
      return isSetChartState();
    case COMMODITY_NAME:
      return isSetCommodityName();
    case PLATE:
      return isSetPlate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Chart)
      return this.equals((Chart)that);
    return false;
  }

  public boolean equals(Chart that) {
    if (that == null)
      return false;

    boolean this_present_chartId = true && this.isSetChartId();
    boolean that_present_chartId = true && that.isSetChartId();
    if (this_present_chartId || that_present_chartId) {
      if (!(this_present_chartId && that_present_chartId))
        return false;
      if (this.chartId != that.chartId)
        return false;
    }

    boolean this_present_xiaohaObjId = true && this.isSetXiaohaObjId();
    boolean that_present_xiaohaObjId = true && that.isSetXiaohaObjId();
    if (this_present_xiaohaObjId || that_present_xiaohaObjId) {
      if (!(this_present_xiaohaObjId && that_present_xiaohaObjId))
        return false;
      if (!this.xiaohaObjId.equals(that.xiaohaObjId))
        return false;
    }

    boolean this_present_chartName = true && this.isSetChartName();
    boolean that_present_chartName = true && that.isSetChartName();
    if (this_present_chartName || that_present_chartName) {
      if (!(this_present_chartName && that_present_chartName))
        return false;
      if (!this.chartName.equals(that.chartName))
        return false;
    }

    boolean this_present_shareKey = true && this.isSetShareKey();
    boolean that_present_shareKey = true && that.isSetShareKey();
    if (this_present_shareKey || that_present_shareKey) {
      if (!(this_present_shareKey && that_present_shareKey))
        return false;
      if (!this.shareKey.equals(that.shareKey))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_parentFolderId = true && this.isSetParentFolderId();
    boolean that_present_parentFolderId = true && that.isSetParentFolderId();
    if (this_present_parentFolderId || that_present_parentFolderId) {
      if (!(this_present_parentFolderId && that_present_parentFolderId))
        return false;
      if (this.parentFolderId != that.parentFolderId)
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    boolean this_present_chartType = true && this.isSetChartType();
    boolean that_present_chartType = true && that.isSetChartType();
    if (this_present_chartType || that_present_chartType) {
      if (!(this_present_chartType && that_present_chartType))
        return false;
      if (!this.chartType.equals(that.chartType))
        return false;
    }

    boolean this_present_chartState = true && this.isSetChartState();
    boolean that_present_chartState = true && that.isSetChartState();
    if (this_present_chartState || that_present_chartState) {
      if (!(this_present_chartState && that_present_chartState))
        return false;
      if (!this.chartState.equals(that.chartState))
        return false;
    }

    boolean this_present_commodityName = true && this.isSetCommodityName();
    boolean that_present_commodityName = true && that.isSetCommodityName();
    if (this_present_commodityName || that_present_commodityName) {
      if (!(this_present_commodityName && that_present_commodityName))
        return false;
      if (!this.commodityName.equals(that.commodityName))
        return false;
    }

    boolean this_present_plate = true && this.isSetPlate();
    boolean that_present_plate = true && that.isSetPlate();
    if (this_present_plate || that_present_plate) {
      if (!(this_present_plate && that_present_plate))
        return false;
      if (!this.plate.equals(that.plate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Chart other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChartId()).compareTo(other.isSetChartId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChartId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chartId, other.chartId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXiaohaObjId()).compareTo(other.isSetXiaohaObjId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXiaohaObjId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xiaohaObjId, other.xiaohaObjId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChartName()).compareTo(other.isSetChartName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChartName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chartName, other.chartName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareKey()).compareTo(other.isSetShareKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareKey, other.shareKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentFolderId()).compareTo(other.isSetParentFolderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentFolderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentFolderId, other.parentFolderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChartType()).compareTo(other.isSetChartType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChartType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chartType, other.chartType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChartState()).compareTo(other.isSetChartState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChartState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chartState, other.chartState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityName()).compareTo(other.isSetCommodityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityName, other.commodityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlate()).compareTo(other.isSetPlate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plate, other.plate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Chart(");
    boolean first = true;

    if (isSetChartId()) {
      sb.append("chartId:");
      sb.append(this.chartId);
      first = false;
    }
    if (isSetXiaohaObjId()) {
      if (!first) sb.append(", ");
      sb.append("xiaohaObjId:");
      if (this.xiaohaObjId == null) {
        sb.append("null");
      } else {
        sb.append(this.xiaohaObjId);
      }
      first = false;
    }
    if (isSetChartName()) {
      if (!first) sb.append(", ");
      sb.append("chartName:");
      if (this.chartName == null) {
        sb.append("null");
      } else {
        sb.append(this.chartName);
      }
      first = false;
    }
    if (isSetShareKey()) {
      if (!first) sb.append(", ");
      sb.append("shareKey:");
      if (this.shareKey == null) {
        sb.append("null");
      } else {
        sb.append(this.shareKey);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetParentFolderId()) {
      if (!first) sb.append(", ");
      sb.append("parentFolderId:");
      sb.append(this.parentFolderId);
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    if (isSetChartType()) {
      if (!first) sb.append(", ");
      sb.append("chartType:");
      if (this.chartType == null) {
        sb.append("null");
      } else {
        sb.append(this.chartType);
      }
      first = false;
    }
    if (isSetChartState()) {
      if (!first) sb.append(", ");
      sb.append("chartState:");
      if (this.chartState == null) {
        sb.append("null");
      } else {
        sb.append(this.chartState);
      }
      first = false;
    }
    if (isSetCommodityName()) {
      if (!first) sb.append(", ");
      sb.append("commodityName:");
      if (this.commodityName == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityName);
      }
      first = false;
    }
    if (isSetPlate()) {
      if (!first) sb.append(", ");
      sb.append("plate:");
      if (this.plate == null) {
        sb.append("null");
      } else {
        sb.append(this.plate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChartStandardSchemeFactory implements SchemeFactory {
    public ChartStandardScheme getScheme() {
      return new ChartStandardScheme();
    }
  }

  private static class ChartStandardScheme extends StandardScheme<Chart> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Chart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chartId = iprot.readI64();
              struct.setChartIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XIAOHA_OBJ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xiaohaObjId = iprot.readString();
              struct.setXiaohaObjIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHART_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chartName = iprot.readString();
              struct.setChartNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHARE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareKey = iprot.readString();
              struct.setShareKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENT_FOLDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentFolderId = iprot.readI64();
              struct.setParentFolderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                struct.tags = new HashSet<String>(2*_set8.size);
                for (int _i9 = 0; _i9 < _set8.size; ++_i9)
                {
                  String _elem10;
                  _elem10 = iprot.readString();
                  struct.tags.add(_elem10);
                }
                iprot.readSetEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHART_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chartType = ChartType.findByValue(iprot.readI32());
              struct.setChartTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHART_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chartState = ChartState.findByValue(iprot.readI32());
              struct.setChartStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMMODITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityName = iprot.readString();
              struct.setCommodityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plate = iprot.readString();
              struct.setPlateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Chart struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetChartId()) {
        oprot.writeFieldBegin(CHART_ID_FIELD_DESC);
        oprot.writeI64(struct.chartId);
        oprot.writeFieldEnd();
      }
      if (struct.xiaohaObjId != null) {
        if (struct.isSetXiaohaObjId()) {
          oprot.writeFieldBegin(XIAOHA_OBJ_ID_FIELD_DESC);
          oprot.writeString(struct.xiaohaObjId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chartName != null) {
        if (struct.isSetChartName()) {
          oprot.writeFieldBegin(CHART_NAME_FIELD_DESC);
          oprot.writeString(struct.chartName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareKey != null) {
        if (struct.isSetShareKey()) {
          oprot.writeFieldBegin(SHARE_KEY_FIELD_DESC);
          oprot.writeString(struct.shareKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentFolderId()) {
        oprot.writeFieldBegin(PARENT_FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.parentFolderId);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (String _iter11 : struct.tags)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.chartType != null) {
        if (struct.isSetChartType()) {
          oprot.writeFieldBegin(CHART_TYPE_FIELD_DESC);
          oprot.writeI32(struct.chartType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.chartState != null) {
        if (struct.isSetChartState()) {
          oprot.writeFieldBegin(CHART_STATE_FIELD_DESC);
          oprot.writeI32(struct.chartState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityName != null) {
        if (struct.isSetCommodityName()) {
          oprot.writeFieldBegin(COMMODITY_NAME_FIELD_DESC);
          oprot.writeString(struct.commodityName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plate != null) {
        if (struct.isSetPlate()) {
          oprot.writeFieldBegin(PLATE_FIELD_DESC);
          oprot.writeString(struct.plate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChartTupleSchemeFactory implements SchemeFactory {
    public ChartTupleScheme getScheme() {
      return new ChartTupleScheme();
    }
  }

  private static class ChartTupleScheme extends TupleScheme<Chart> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Chart struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChartId()) {
        optionals.set(0);
      }
      if (struct.isSetXiaohaObjId()) {
        optionals.set(1);
      }
      if (struct.isSetChartName()) {
        optionals.set(2);
      }
      if (struct.isSetShareKey()) {
        optionals.set(3);
      }
      if (struct.isSetUrl()) {
        optionals.set(4);
      }
      if (struct.isSetParentFolderId()) {
        optionals.set(5);
      }
      if (struct.isSetTags()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(7);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetChartType()) {
        optionals.set(9);
      }
      if (struct.isSetChartState()) {
        optionals.set(10);
      }
      if (struct.isSetCommodityName()) {
        optionals.set(11);
      }
      if (struct.isSetPlate()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetChartId()) {
        oprot.writeI64(struct.chartId);
      }
      if (struct.isSetXiaohaObjId()) {
        oprot.writeString(struct.xiaohaObjId);
      }
      if (struct.isSetChartName()) {
        oprot.writeString(struct.chartName);
      }
      if (struct.isSetShareKey()) {
        oprot.writeString(struct.shareKey);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetParentFolderId()) {
        oprot.writeI64(struct.parentFolderId);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter12 : struct.tags)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
      if (struct.isSetChartType()) {
        oprot.writeI32(struct.chartType.getValue());
      }
      if (struct.isSetChartState()) {
        oprot.writeI32(struct.chartState.getValue());
      }
      if (struct.isSetCommodityName()) {
        oprot.writeString(struct.commodityName);
      }
      if (struct.isSetPlate()) {
        oprot.writeString(struct.plate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Chart struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.chartId = iprot.readI64();
        struct.setChartIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xiaohaObjId = iprot.readString();
        struct.setXiaohaObjIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chartName = iprot.readString();
        struct.setChartNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shareKey = iprot.readString();
        struct.setShareKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.parentFolderId = iprot.readI64();
        struct.setParentFolderIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashSet<String>(2*_set13.size);
          for (int _i14 = 0; _i14 < _set13.size; ++_i14)
          {
            String _elem15;
            _elem15 = iprot.readString();
            struct.tags.add(_elem15);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        struct.chartType = ChartType.findByValue(iprot.readI32());
        struct.setChartTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.chartState = ChartState.findByValue(iprot.readI32());
        struct.setChartStateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.commodityName = iprot.readString();
        struct.setCommodityNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.plate = iprot.readString();
        struct.setPlateIsSet(true);
      }
    }
  }

}

