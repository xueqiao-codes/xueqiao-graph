/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.graph.xiaoha.chart.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChartFolder implements org.apache.thrift.TBase<ChartFolder, ChartFolder._Fields>, java.io.Serializable, Cloneable, Comparable<ChartFolder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChartFolder");

  private static final org.apache.thrift.protocol.TField FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("folderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField XIAOHA_OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("xiaohaObjId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FOLDER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("folderName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARENT_FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentFolderId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChartFolderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChartFolderTupleSchemeFactory());
  }

  public long folderId; // optional
  public String xiaohaObjId; // optional
  public String folderName; // optional
  public long parentFolderId; // optional
  public Set<String> tags; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FOLDER_ID((short)1, "folderId"),
    XIAOHA_OBJ_ID((short)2, "xiaohaObjId"),
    FOLDER_NAME((short)3, "folderName"),
    PARENT_FOLDER_ID((short)4, "parentFolderId"),
    TAGS((short)6, "tags"),
    CREATE_TIMESTAMP((short)7, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)8, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOLDER_ID
          return FOLDER_ID;
        case 2: // XIAOHA_OBJ_ID
          return XIAOHA_OBJ_ID;
        case 3: // FOLDER_NAME
          return FOLDER_NAME;
        case 4: // PARENT_FOLDER_ID
          return PARENT_FOLDER_ID;
        case 6: // TAGS
          return TAGS;
        case 7: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 8: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FOLDERID_ISSET_ID = 0;
  private static final int __PARENTFOLDERID_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FOLDER_ID,_Fields.XIAOHA_OBJ_ID,_Fields.FOLDER_NAME,_Fields.PARENT_FOLDER_ID,_Fields.TAGS,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("folderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.XIAOHA_OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("xiaohaObjId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOLDER_NAME, new org.apache.thrift.meta_data.FieldMetaData("folderName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("parentFolderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChartFolder.class, metaDataMap);
  }

  public ChartFolder() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChartFolder(ChartFolder other) {
    __isset_bitfield = other.__isset_bitfield;
    this.folderId = other.folderId;
    if (other.isSetXiaohaObjId()) {
      this.xiaohaObjId = other.xiaohaObjId;
    }
    if (other.isSetFolderName()) {
      this.folderName = other.folderName;
    }
    this.parentFolderId = other.parentFolderId;
    if (other.isSetTags()) {
      Set<String> __this__tags = new HashSet<String>(other.tags);
      this.tags = __this__tags;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public ChartFolder deepCopy() {
    return new ChartFolder(this);
  }

  @Override
  public void clear() {
    setFolderIdIsSet(false);
    this.folderId = 0;
    this.xiaohaObjId = null;
    this.folderName = null;
    setParentFolderIdIsSet(false);
    this.parentFolderId = 0;
    this.tags = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public long getFolderId() {
    return this.folderId;
  }

  public ChartFolder setFolderId(long folderId) {
    this.folderId = folderId;
    setFolderIdIsSet(true);
    return this;
  }

  public void unsetFolderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLDERID_ISSET_ID);
  }

  /** Returns true if field folderId is set (has been assigned a value) and false otherwise */
  public boolean isSetFolderId() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLDERID_ISSET_ID);
  }

  public void setFolderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLDERID_ISSET_ID, value);
  }

  public String getXiaohaObjId() {
    return this.xiaohaObjId;
  }

  public ChartFolder setXiaohaObjId(String xiaohaObjId) {
    this.xiaohaObjId = xiaohaObjId;
    return this;
  }

  public void unsetXiaohaObjId() {
    this.xiaohaObjId = null;
  }

  /** Returns true if field xiaohaObjId is set (has been assigned a value) and false otherwise */
  public boolean isSetXiaohaObjId() {
    return this.xiaohaObjId != null;
  }

  public void setXiaohaObjIdIsSet(boolean value) {
    if (!value) {
      this.xiaohaObjId = null;
    }
  }

  public String getFolderName() {
    return this.folderName;
  }

  public ChartFolder setFolderName(String folderName) {
    this.folderName = folderName;
    return this;
  }

  public void unsetFolderName() {
    this.folderName = null;
  }

  /** Returns true if field folderName is set (has been assigned a value) and false otherwise */
  public boolean isSetFolderName() {
    return this.folderName != null;
  }

  public void setFolderNameIsSet(boolean value) {
    if (!value) {
      this.folderName = null;
    }
  }

  public long getParentFolderId() {
    return this.parentFolderId;
  }

  public ChartFolder setParentFolderId(long parentFolderId) {
    this.parentFolderId = parentFolderId;
    setParentFolderIdIsSet(true);
    return this;
  }

  public void unsetParentFolderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
  }

  /** Returns true if field parentFolderId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentFolderId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
  }

  public void setParentFolderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID, value);
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new HashSet<String>();
    }
    this.tags.add(elem);
  }

  public Set<String> getTags() {
    return this.tags;
  }

  public ChartFolder setTags(Set<String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public ChartFolder setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public ChartFolder setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FOLDER_ID:
      if (value == null) {
        unsetFolderId();
      } else {
        setFolderId((Long)value);
      }
      break;

    case XIAOHA_OBJ_ID:
      if (value == null) {
        unsetXiaohaObjId();
      } else {
        setXiaohaObjId((String)value);
      }
      break;

    case FOLDER_NAME:
      if (value == null) {
        unsetFolderName();
      } else {
        setFolderName((String)value);
      }
      break;

    case PARENT_FOLDER_ID:
      if (value == null) {
        unsetParentFolderId();
      } else {
        setParentFolderId((Long)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Set<String>)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FOLDER_ID:
      return Long.valueOf(getFolderId());

    case XIAOHA_OBJ_ID:
      return getXiaohaObjId();

    case FOLDER_NAME:
      return getFolderName();

    case PARENT_FOLDER_ID:
      return Long.valueOf(getParentFolderId());

    case TAGS:
      return getTags();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FOLDER_ID:
      return isSetFolderId();
    case XIAOHA_OBJ_ID:
      return isSetXiaohaObjId();
    case FOLDER_NAME:
      return isSetFolderName();
    case PARENT_FOLDER_ID:
      return isSetParentFolderId();
    case TAGS:
      return isSetTags();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChartFolder)
      return this.equals((ChartFolder)that);
    return false;
  }

  public boolean equals(ChartFolder that) {
    if (that == null)
      return false;

    boolean this_present_folderId = true && this.isSetFolderId();
    boolean that_present_folderId = true && that.isSetFolderId();
    if (this_present_folderId || that_present_folderId) {
      if (!(this_present_folderId && that_present_folderId))
        return false;
      if (this.folderId != that.folderId)
        return false;
    }

    boolean this_present_xiaohaObjId = true && this.isSetXiaohaObjId();
    boolean that_present_xiaohaObjId = true && that.isSetXiaohaObjId();
    if (this_present_xiaohaObjId || that_present_xiaohaObjId) {
      if (!(this_present_xiaohaObjId && that_present_xiaohaObjId))
        return false;
      if (!this.xiaohaObjId.equals(that.xiaohaObjId))
        return false;
    }

    boolean this_present_folderName = true && this.isSetFolderName();
    boolean that_present_folderName = true && that.isSetFolderName();
    if (this_present_folderName || that_present_folderName) {
      if (!(this_present_folderName && that_present_folderName))
        return false;
      if (!this.folderName.equals(that.folderName))
        return false;
    }

    boolean this_present_parentFolderId = true && this.isSetParentFolderId();
    boolean that_present_parentFolderId = true && that.isSetParentFolderId();
    if (this_present_parentFolderId || that_present_parentFolderId) {
      if (!(this_present_parentFolderId && that_present_parentFolderId))
        return false;
      if (this.parentFolderId != that.parentFolderId)
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ChartFolder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFolderId()).compareTo(other.isSetFolderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFolderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folderId, other.folderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXiaohaObjId()).compareTo(other.isSetXiaohaObjId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXiaohaObjId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xiaohaObjId, other.xiaohaObjId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFolderName()).compareTo(other.isSetFolderName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFolderName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folderName, other.folderName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentFolderId()).compareTo(other.isSetParentFolderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentFolderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentFolderId, other.parentFolderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChartFolder(");
    boolean first = true;

    if (isSetFolderId()) {
      sb.append("folderId:");
      sb.append(this.folderId);
      first = false;
    }
    if (isSetXiaohaObjId()) {
      if (!first) sb.append(", ");
      sb.append("xiaohaObjId:");
      if (this.xiaohaObjId == null) {
        sb.append("null");
      } else {
        sb.append(this.xiaohaObjId);
      }
      first = false;
    }
    if (isSetFolderName()) {
      if (!first) sb.append(", ");
      sb.append("folderName:");
      if (this.folderName == null) {
        sb.append("null");
      } else {
        sb.append(this.folderName);
      }
      first = false;
    }
    if (isSetParentFolderId()) {
      if (!first) sb.append(", ");
      sb.append("parentFolderId:");
      sb.append(this.parentFolderId);
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChartFolderStandardSchemeFactory implements SchemeFactory {
    public ChartFolderStandardScheme getScheme() {
      return new ChartFolderStandardScheme();
    }
  }

  private static class ChartFolderStandardScheme extends StandardScheme<ChartFolder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChartFolder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FOLDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.folderId = iprot.readI64();
              struct.setFolderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XIAOHA_OBJ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xiaohaObjId = iprot.readString();
              struct.setXiaohaObjIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOLDER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.folderName = iprot.readString();
              struct.setFolderNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARENT_FOLDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentFolderId = iprot.readI64();
              struct.setParentFolderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.tags = new HashSet<String>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.tags.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChartFolder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFolderId()) {
        oprot.writeFieldBegin(FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.folderId);
        oprot.writeFieldEnd();
      }
      if (struct.xiaohaObjId != null) {
        if (struct.isSetXiaohaObjId()) {
          oprot.writeFieldBegin(XIAOHA_OBJ_ID_FIELD_DESC);
          oprot.writeString(struct.xiaohaObjId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.folderName != null) {
        if (struct.isSetFolderName()) {
          oprot.writeFieldBegin(FOLDER_NAME_FIELD_DESC);
          oprot.writeString(struct.folderName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentFolderId()) {
        oprot.writeFieldBegin(PARENT_FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.parentFolderId);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (String _iter27 : struct.tags)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChartFolderTupleSchemeFactory implements SchemeFactory {
    public ChartFolderTupleScheme getScheme() {
      return new ChartFolderTupleScheme();
    }
  }

  private static class ChartFolderTupleScheme extends TupleScheme<ChartFolder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChartFolder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFolderId()) {
        optionals.set(0);
      }
      if (struct.isSetXiaohaObjId()) {
        optionals.set(1);
      }
      if (struct.isSetFolderName()) {
        optionals.set(2);
      }
      if (struct.isSetParentFolderId()) {
        optionals.set(3);
      }
      if (struct.isSetTags()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFolderId()) {
        oprot.writeI64(struct.folderId);
      }
      if (struct.isSetXiaohaObjId()) {
        oprot.writeString(struct.xiaohaObjId);
      }
      if (struct.isSetFolderName()) {
        oprot.writeString(struct.folderName);
      }
      if (struct.isSetParentFolderId()) {
        oprot.writeI64(struct.parentFolderId);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter28 : struct.tags)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChartFolder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.folderId = iprot.readI64();
        struct.setFolderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xiaohaObjId = iprot.readString();
        struct.setXiaohaObjIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.folderName = iprot.readString();
        struct.setFolderNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parentFolderId = iprot.readI64();
        struct.setParentFolderIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashSet<String>(2*_set29.size);
          for (int _i30 = 0; _i30 < _set29.size; ++_i30)
          {
            String _elem31;
            _elem31 = iprot.readString();
            struct.tags.add(_elem31);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

