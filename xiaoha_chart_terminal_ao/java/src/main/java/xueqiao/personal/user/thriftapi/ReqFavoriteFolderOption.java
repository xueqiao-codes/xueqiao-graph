/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.personal.user.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqFavoriteFolderOption implements org.apache.thrift.TBase<ReqFavoriteFolderOption, ReqFavoriteFolderOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqFavoriteFolderOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqFavoriteFolderOption");

  private static final org.apache.thrift.protocol.TField FOLDER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("folderIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField PERSON_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("personUserId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentFolderId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqFavoriteFolderOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqFavoriteFolderOptionTupleSchemeFactory());
  }

  public Set<Long> folderIds; // optional
  public long personUserId; // optional
  public long parentFolderId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FOLDER_IDS((short)1, "folderIds"),
    PERSON_USER_ID((short)2, "personUserId"),
    PARENT_FOLDER_ID((short)3, "parentFolderId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOLDER_IDS
          return FOLDER_IDS;
        case 2: // PERSON_USER_ID
          return PERSON_USER_ID;
        case 3: // PARENT_FOLDER_ID
          return PARENT_FOLDER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PERSONUSERID_ISSET_ID = 0;
  private static final int __PARENTFOLDERID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FOLDER_IDS,_Fields.PERSON_USER_ID,_Fields.PARENT_FOLDER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FOLDER_IDS, new org.apache.thrift.meta_data.FieldMetaData("folderIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PERSON_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("personUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("parentFolderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqFavoriteFolderOption.class, metaDataMap);
  }

  public ReqFavoriteFolderOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqFavoriteFolderOption(ReqFavoriteFolderOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFolderIds()) {
      Set<Long> __this__folderIds = new HashSet<Long>(other.folderIds);
      this.folderIds = __this__folderIds;
    }
    this.personUserId = other.personUserId;
    this.parentFolderId = other.parentFolderId;
  }

  public ReqFavoriteFolderOption deepCopy() {
    return new ReqFavoriteFolderOption(this);
  }

  @Override
  public void clear() {
    this.folderIds = null;
    setPersonUserIdIsSet(false);
    this.personUserId = 0;
    setParentFolderIdIsSet(false);
    this.parentFolderId = 0;
  }

  public int getFolderIdsSize() {
    return (this.folderIds == null) ? 0 : this.folderIds.size();
  }

  public java.util.Iterator<Long> getFolderIdsIterator() {
    return (this.folderIds == null) ? null : this.folderIds.iterator();
  }

  public void addToFolderIds(long elem) {
    if (this.folderIds == null) {
      this.folderIds = new HashSet<Long>();
    }
    this.folderIds.add(elem);
  }

  public Set<Long> getFolderIds() {
    return this.folderIds;
  }

  public ReqFavoriteFolderOption setFolderIds(Set<Long> folderIds) {
    this.folderIds = folderIds;
    return this;
  }

  public void unsetFolderIds() {
    this.folderIds = null;
  }

  /** Returns true if field folderIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFolderIds() {
    return this.folderIds != null;
  }

  public void setFolderIdsIsSet(boolean value) {
    if (!value) {
      this.folderIds = null;
    }
  }

  public long getPersonUserId() {
    return this.personUserId;
  }

  public ReqFavoriteFolderOption setPersonUserId(long personUserId) {
    this.personUserId = personUserId;
    setPersonUserIdIsSet(true);
    return this;
  }

  public void unsetPersonUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSONUSERID_ISSET_ID);
  }

  /** Returns true if field personUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PERSONUSERID_ISSET_ID);
  }

  public void setPersonUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSONUSERID_ISSET_ID, value);
  }

  public long getParentFolderId() {
    return this.parentFolderId;
  }

  public ReqFavoriteFolderOption setParentFolderId(long parentFolderId) {
    this.parentFolderId = parentFolderId;
    setParentFolderIdIsSet(true);
    return this;
  }

  public void unsetParentFolderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
  }

  /** Returns true if field parentFolderId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentFolderId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
  }

  public void setParentFolderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FOLDER_IDS:
      if (value == null) {
        unsetFolderIds();
      } else {
        setFolderIds((Set<Long>)value);
      }
      break;

    case PERSON_USER_ID:
      if (value == null) {
        unsetPersonUserId();
      } else {
        setPersonUserId((Long)value);
      }
      break;

    case PARENT_FOLDER_ID:
      if (value == null) {
        unsetParentFolderId();
      } else {
        setParentFolderId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FOLDER_IDS:
      return getFolderIds();

    case PERSON_USER_ID:
      return Long.valueOf(getPersonUserId());

    case PARENT_FOLDER_ID:
      return Long.valueOf(getParentFolderId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FOLDER_IDS:
      return isSetFolderIds();
    case PERSON_USER_ID:
      return isSetPersonUserId();
    case PARENT_FOLDER_ID:
      return isSetParentFolderId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqFavoriteFolderOption)
      return this.equals((ReqFavoriteFolderOption)that);
    return false;
  }

  public boolean equals(ReqFavoriteFolderOption that) {
    if (that == null)
      return false;

    boolean this_present_folderIds = true && this.isSetFolderIds();
    boolean that_present_folderIds = true && that.isSetFolderIds();
    if (this_present_folderIds || that_present_folderIds) {
      if (!(this_present_folderIds && that_present_folderIds))
        return false;
      if (!this.folderIds.equals(that.folderIds))
        return false;
    }

    boolean this_present_personUserId = true && this.isSetPersonUserId();
    boolean that_present_personUserId = true && that.isSetPersonUserId();
    if (this_present_personUserId || that_present_personUserId) {
      if (!(this_present_personUserId && that_present_personUserId))
        return false;
      if (this.personUserId != that.personUserId)
        return false;
    }

    boolean this_present_parentFolderId = true && this.isSetParentFolderId();
    boolean that_present_parentFolderId = true && that.isSetParentFolderId();
    if (this_present_parentFolderId || that_present_parentFolderId) {
      if (!(this_present_parentFolderId && that_present_parentFolderId))
        return false;
      if (this.parentFolderId != that.parentFolderId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqFavoriteFolderOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFolderIds()).compareTo(other.isSetFolderIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFolderIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folderIds, other.folderIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonUserId()).compareTo(other.isSetPersonUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personUserId, other.personUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentFolderId()).compareTo(other.isSetParentFolderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentFolderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentFolderId, other.parentFolderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqFavoriteFolderOption(");
    boolean first = true;

    if (isSetFolderIds()) {
      sb.append("folderIds:");
      if (this.folderIds == null) {
        sb.append("null");
      } else {
        sb.append(this.folderIds);
      }
      first = false;
    }
    if (isSetPersonUserId()) {
      if (!first) sb.append(", ");
      sb.append("personUserId:");
      sb.append(this.personUserId);
      first = false;
    }
    if (isSetParentFolderId()) {
      if (!first) sb.append(", ");
      sb.append("parentFolderId:");
      sb.append(this.parentFolderId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqFavoriteFolderOptionStandardSchemeFactory implements SchemeFactory {
    public ReqFavoriteFolderOptionStandardScheme getScheme() {
      return new ReqFavoriteFolderOptionStandardScheme();
    }
  }

  private static class ReqFavoriteFolderOptionStandardScheme extends StandardScheme<ReqFavoriteFolderOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqFavoriteFolderOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FOLDER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.folderIds = new HashSet<Long>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  long _elem26;
                  _elem26 = iprot.readI64();
                  struct.folderIds.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setFolderIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERSON_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.personUserId = iprot.readI64();
              struct.setPersonUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_FOLDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentFolderId = iprot.readI64();
              struct.setParentFolderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqFavoriteFolderOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.folderIds != null) {
        if (struct.isSetFolderIds()) {
          oprot.writeFieldBegin(FOLDER_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.folderIds.size()));
            for (long _iter27 : struct.folderIds)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPersonUserId()) {
        oprot.writeFieldBegin(PERSON_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.personUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParentFolderId()) {
        oprot.writeFieldBegin(PARENT_FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.parentFolderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqFavoriteFolderOptionTupleSchemeFactory implements SchemeFactory {
    public ReqFavoriteFolderOptionTupleScheme getScheme() {
      return new ReqFavoriteFolderOptionTupleScheme();
    }
  }

  private static class ReqFavoriteFolderOptionTupleScheme extends TupleScheme<ReqFavoriteFolderOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqFavoriteFolderOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFolderIds()) {
        optionals.set(0);
      }
      if (struct.isSetPersonUserId()) {
        optionals.set(1);
      }
      if (struct.isSetParentFolderId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFolderIds()) {
        {
          oprot.writeI32(struct.folderIds.size());
          for (long _iter28 : struct.folderIds)
          {
            oprot.writeI64(_iter28);
          }
        }
      }
      if (struct.isSetPersonUserId()) {
        oprot.writeI64(struct.personUserId);
      }
      if (struct.isSetParentFolderId()) {
        oprot.writeI64(struct.parentFolderId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqFavoriteFolderOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.folderIds = new HashSet<Long>(2*_set29.size);
          for (int _i30 = 0; _i30 < _set29.size; ++_i30)
          {
            long _elem31;
            _elem31 = iprot.readI64();
            struct.folderIds.add(_elem31);
          }
        }
        struct.setFolderIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.personUserId = iprot.readI64();
        struct.setPersonUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentFolderId = iprot.readI64();
        struct.setParentFolderIdIsSet(true);
      }
    }
  }

}

