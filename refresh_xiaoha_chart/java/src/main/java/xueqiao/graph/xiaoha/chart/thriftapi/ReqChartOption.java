/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.graph.xiaoha.chart.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqChartOption implements org.apache.thrift.TBase<ReqChartOption, ReqChartOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqChartOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqChartOption");

  private static final org.apache.thrift.protocol.TField CHART_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("chartIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField XIAOHA_OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("xiaohaObjId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_FOLDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentFolderId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CHART_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("chartType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COMMODITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("plate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField KEY_WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyWords", org.apache.thrift.protocol.TType.SET, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqChartOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqChartOptionTupleSchemeFactory());
  }

  public Set<Long> chartIds; // optional
  public String xiaohaObjId; // optional
  public long parentFolderId; // optional
  /**
   * 
   * @see ChartType
   */
  public ChartType chartType; // optional
  public String commodityName; // optional
  public String plate; // optional
  public String name; // optional
  public Set<String> keyWords; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHART_IDS((short)1, "chartIds"),
    XIAOHA_OBJ_ID((short)2, "xiaohaObjId"),
    PARENT_FOLDER_ID((short)3, "parentFolderId"),
    /**
     * 
     * @see ChartType
     */
    CHART_TYPE((short)4, "chartType"),
    COMMODITY_NAME((short)5, "commodityName"),
    PLATE((short)6, "plate"),
    NAME((short)7, "name"),
    KEY_WORDS((short)8, "keyWords");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHART_IDS
          return CHART_IDS;
        case 2: // XIAOHA_OBJ_ID
          return XIAOHA_OBJ_ID;
        case 3: // PARENT_FOLDER_ID
          return PARENT_FOLDER_ID;
        case 4: // CHART_TYPE
          return CHART_TYPE;
        case 5: // COMMODITY_NAME
          return COMMODITY_NAME;
        case 6: // PLATE
          return PLATE;
        case 7: // NAME
          return NAME;
        case 8: // KEY_WORDS
          return KEY_WORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARENTFOLDERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CHART_IDS,_Fields.XIAOHA_OBJ_ID,_Fields.PARENT_FOLDER_ID,_Fields.CHART_TYPE,_Fields.COMMODITY_NAME,_Fields.PLATE,_Fields.NAME,_Fields.KEY_WORDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHART_IDS, new org.apache.thrift.meta_data.FieldMetaData("chartIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.XIAOHA_OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("xiaohaObjId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_FOLDER_ID, new org.apache.thrift.meta_data.FieldMetaData("parentFolderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHART_TYPE, new org.apache.thrift.meta_data.FieldMetaData("chartType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChartType.class)));
    tmpMap.put(_Fields.COMMODITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("commodityName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATE, new org.apache.thrift.meta_data.FieldMetaData("plate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_WORDS, new org.apache.thrift.meta_data.FieldMetaData("keyWords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqChartOption.class, metaDataMap);
  }

  public ReqChartOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqChartOption(ReqChartOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChartIds()) {
      Set<Long> __this__chartIds = new HashSet<Long>(other.chartIds);
      this.chartIds = __this__chartIds;
    }
    if (other.isSetXiaohaObjId()) {
      this.xiaohaObjId = other.xiaohaObjId;
    }
    this.parentFolderId = other.parentFolderId;
    if (other.isSetChartType()) {
      this.chartType = other.chartType;
    }
    if (other.isSetCommodityName()) {
      this.commodityName = other.commodityName;
    }
    if (other.isSetPlate()) {
      this.plate = other.plate;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetKeyWords()) {
      Set<String> __this__keyWords = new HashSet<String>(other.keyWords);
      this.keyWords = __this__keyWords;
    }
  }

  public ReqChartOption deepCopy() {
    return new ReqChartOption(this);
  }

  @Override
  public void clear() {
    this.chartIds = null;
    this.xiaohaObjId = null;
    setParentFolderIdIsSet(false);
    this.parentFolderId = 0;
    this.chartType = null;
    this.commodityName = null;
    this.plate = null;
    this.name = null;
    this.keyWords = null;
  }

  public int getChartIdsSize() {
    return (this.chartIds == null) ? 0 : this.chartIds.size();
  }

  public java.util.Iterator<Long> getChartIdsIterator() {
    return (this.chartIds == null) ? null : this.chartIds.iterator();
  }

  public void addToChartIds(long elem) {
    if (this.chartIds == null) {
      this.chartIds = new HashSet<Long>();
    }
    this.chartIds.add(elem);
  }

  public Set<Long> getChartIds() {
    return this.chartIds;
  }

  public ReqChartOption setChartIds(Set<Long> chartIds) {
    this.chartIds = chartIds;
    return this;
  }

  public void unsetChartIds() {
    this.chartIds = null;
  }

  /** Returns true if field chartIds is set (has been assigned a value) and false otherwise */
  public boolean isSetChartIds() {
    return this.chartIds != null;
  }

  public void setChartIdsIsSet(boolean value) {
    if (!value) {
      this.chartIds = null;
    }
  }

  public String getXiaohaObjId() {
    return this.xiaohaObjId;
  }

  public ReqChartOption setXiaohaObjId(String xiaohaObjId) {
    this.xiaohaObjId = xiaohaObjId;
    return this;
  }

  public void unsetXiaohaObjId() {
    this.xiaohaObjId = null;
  }

  /** Returns true if field xiaohaObjId is set (has been assigned a value) and false otherwise */
  public boolean isSetXiaohaObjId() {
    return this.xiaohaObjId != null;
  }

  public void setXiaohaObjIdIsSet(boolean value) {
    if (!value) {
      this.xiaohaObjId = null;
    }
  }

  public long getParentFolderId() {
    return this.parentFolderId;
  }

  public ReqChartOption setParentFolderId(long parentFolderId) {
    this.parentFolderId = parentFolderId;
    setParentFolderIdIsSet(true);
    return this;
  }

  public void unsetParentFolderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
  }

  /** Returns true if field parentFolderId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentFolderId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID);
  }

  public void setParentFolderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTFOLDERID_ISSET_ID, value);
  }

  /**
   * 
   * @see ChartType
   */
  public ChartType getChartType() {
    return this.chartType;
  }

  /**
   * 
   * @see ChartType
   */
  public ReqChartOption setChartType(ChartType chartType) {
    this.chartType = chartType;
    return this;
  }

  public void unsetChartType() {
    this.chartType = null;
  }

  /** Returns true if field chartType is set (has been assigned a value) and false otherwise */
  public boolean isSetChartType() {
    return this.chartType != null;
  }

  public void setChartTypeIsSet(boolean value) {
    if (!value) {
      this.chartType = null;
    }
  }

  public String getCommodityName() {
    return this.commodityName;
  }

  public ReqChartOption setCommodityName(String commodityName) {
    this.commodityName = commodityName;
    return this;
  }

  public void unsetCommodityName() {
    this.commodityName = null;
  }

  /** Returns true if field commodityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityName() {
    return this.commodityName != null;
  }

  public void setCommodityNameIsSet(boolean value) {
    if (!value) {
      this.commodityName = null;
    }
  }

  public String getPlate() {
    return this.plate;
  }

  public ReqChartOption setPlate(String plate) {
    this.plate = plate;
    return this;
  }

  public void unsetPlate() {
    this.plate = null;
  }

  /** Returns true if field plate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlate() {
    return this.plate != null;
  }

  public void setPlateIsSet(boolean value) {
    if (!value) {
      this.plate = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public ReqChartOption setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getKeyWordsSize() {
    return (this.keyWords == null) ? 0 : this.keyWords.size();
  }

  public java.util.Iterator<String> getKeyWordsIterator() {
    return (this.keyWords == null) ? null : this.keyWords.iterator();
  }

  public void addToKeyWords(String elem) {
    if (this.keyWords == null) {
      this.keyWords = new HashSet<String>();
    }
    this.keyWords.add(elem);
  }

  public Set<String> getKeyWords() {
    return this.keyWords;
  }

  public ReqChartOption setKeyWords(Set<String> keyWords) {
    this.keyWords = keyWords;
    return this;
  }

  public void unsetKeyWords() {
    this.keyWords = null;
  }

  /** Returns true if field keyWords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyWords() {
    return this.keyWords != null;
  }

  public void setKeyWordsIsSet(boolean value) {
    if (!value) {
      this.keyWords = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHART_IDS:
      if (value == null) {
        unsetChartIds();
      } else {
        setChartIds((Set<Long>)value);
      }
      break;

    case XIAOHA_OBJ_ID:
      if (value == null) {
        unsetXiaohaObjId();
      } else {
        setXiaohaObjId((String)value);
      }
      break;

    case PARENT_FOLDER_ID:
      if (value == null) {
        unsetParentFolderId();
      } else {
        setParentFolderId((Long)value);
      }
      break;

    case CHART_TYPE:
      if (value == null) {
        unsetChartType();
      } else {
        setChartType((ChartType)value);
      }
      break;

    case COMMODITY_NAME:
      if (value == null) {
        unsetCommodityName();
      } else {
        setCommodityName((String)value);
      }
      break;

    case PLATE:
      if (value == null) {
        unsetPlate();
      } else {
        setPlate((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case KEY_WORDS:
      if (value == null) {
        unsetKeyWords();
      } else {
        setKeyWords((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHART_IDS:
      return getChartIds();

    case XIAOHA_OBJ_ID:
      return getXiaohaObjId();

    case PARENT_FOLDER_ID:
      return Long.valueOf(getParentFolderId());

    case CHART_TYPE:
      return getChartType();

    case COMMODITY_NAME:
      return getCommodityName();

    case PLATE:
      return getPlate();

    case NAME:
      return getName();

    case KEY_WORDS:
      return getKeyWords();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHART_IDS:
      return isSetChartIds();
    case XIAOHA_OBJ_ID:
      return isSetXiaohaObjId();
    case PARENT_FOLDER_ID:
      return isSetParentFolderId();
    case CHART_TYPE:
      return isSetChartType();
    case COMMODITY_NAME:
      return isSetCommodityName();
    case PLATE:
      return isSetPlate();
    case NAME:
      return isSetName();
    case KEY_WORDS:
      return isSetKeyWords();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqChartOption)
      return this.equals((ReqChartOption)that);
    return false;
  }

  public boolean equals(ReqChartOption that) {
    if (that == null)
      return false;

    boolean this_present_chartIds = true && this.isSetChartIds();
    boolean that_present_chartIds = true && that.isSetChartIds();
    if (this_present_chartIds || that_present_chartIds) {
      if (!(this_present_chartIds && that_present_chartIds))
        return false;
      if (!this.chartIds.equals(that.chartIds))
        return false;
    }

    boolean this_present_xiaohaObjId = true && this.isSetXiaohaObjId();
    boolean that_present_xiaohaObjId = true && that.isSetXiaohaObjId();
    if (this_present_xiaohaObjId || that_present_xiaohaObjId) {
      if (!(this_present_xiaohaObjId && that_present_xiaohaObjId))
        return false;
      if (!this.xiaohaObjId.equals(that.xiaohaObjId))
        return false;
    }

    boolean this_present_parentFolderId = true && this.isSetParentFolderId();
    boolean that_present_parentFolderId = true && that.isSetParentFolderId();
    if (this_present_parentFolderId || that_present_parentFolderId) {
      if (!(this_present_parentFolderId && that_present_parentFolderId))
        return false;
      if (this.parentFolderId != that.parentFolderId)
        return false;
    }

    boolean this_present_chartType = true && this.isSetChartType();
    boolean that_present_chartType = true && that.isSetChartType();
    if (this_present_chartType || that_present_chartType) {
      if (!(this_present_chartType && that_present_chartType))
        return false;
      if (!this.chartType.equals(that.chartType))
        return false;
    }

    boolean this_present_commodityName = true && this.isSetCommodityName();
    boolean that_present_commodityName = true && that.isSetCommodityName();
    if (this_present_commodityName || that_present_commodityName) {
      if (!(this_present_commodityName && that_present_commodityName))
        return false;
      if (!this.commodityName.equals(that.commodityName))
        return false;
    }

    boolean this_present_plate = true && this.isSetPlate();
    boolean that_present_plate = true && that.isSetPlate();
    if (this_present_plate || that_present_plate) {
      if (!(this_present_plate && that_present_plate))
        return false;
      if (!this.plate.equals(that.plate))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_keyWords = true && this.isSetKeyWords();
    boolean that_present_keyWords = true && that.isSetKeyWords();
    if (this_present_keyWords || that_present_keyWords) {
      if (!(this_present_keyWords && that_present_keyWords))
        return false;
      if (!this.keyWords.equals(that.keyWords))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqChartOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChartIds()).compareTo(other.isSetChartIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChartIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chartIds, other.chartIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXiaohaObjId()).compareTo(other.isSetXiaohaObjId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXiaohaObjId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xiaohaObjId, other.xiaohaObjId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentFolderId()).compareTo(other.isSetParentFolderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentFolderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentFolderId, other.parentFolderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChartType()).compareTo(other.isSetChartType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChartType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chartType, other.chartType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityName()).compareTo(other.isSetCommodityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityName, other.commodityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlate()).compareTo(other.isSetPlate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plate, other.plate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyWords()).compareTo(other.isSetKeyWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyWords, other.keyWords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqChartOption(");
    boolean first = true;

    if (isSetChartIds()) {
      sb.append("chartIds:");
      if (this.chartIds == null) {
        sb.append("null");
      } else {
        sb.append(this.chartIds);
      }
      first = false;
    }
    if (isSetXiaohaObjId()) {
      if (!first) sb.append(", ");
      sb.append("xiaohaObjId:");
      if (this.xiaohaObjId == null) {
        sb.append("null");
      } else {
        sb.append(this.xiaohaObjId);
      }
      first = false;
    }
    if (isSetParentFolderId()) {
      if (!first) sb.append(", ");
      sb.append("parentFolderId:");
      sb.append(this.parentFolderId);
      first = false;
    }
    if (isSetChartType()) {
      if (!first) sb.append(", ");
      sb.append("chartType:");
      if (this.chartType == null) {
        sb.append("null");
      } else {
        sb.append(this.chartType);
      }
      first = false;
    }
    if (isSetCommodityName()) {
      if (!first) sb.append(", ");
      sb.append("commodityName:");
      if (this.commodityName == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityName);
      }
      first = false;
    }
    if (isSetPlate()) {
      if (!first) sb.append(", ");
      sb.append("plate:");
      if (this.plate == null) {
        sb.append("null");
      } else {
        sb.append(this.plate);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetKeyWords()) {
      if (!first) sb.append(", ");
      sb.append("keyWords:");
      if (this.keyWords == null) {
        sb.append("null");
      } else {
        sb.append(this.keyWords);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqChartOptionStandardSchemeFactory implements SchemeFactory {
    public ReqChartOptionStandardScheme getScheme() {
      return new ReqChartOptionStandardScheme();
    }
  }

  private static class ReqChartOptionStandardScheme extends StandardScheme<ReqChartOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqChartOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHART_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set48 = iprot.readSetBegin();
                struct.chartIds = new HashSet<Long>(2*_set48.size);
                for (int _i49 = 0; _i49 < _set48.size; ++_i49)
                {
                  long _elem50;
                  _elem50 = iprot.readI64();
                  struct.chartIds.add(_elem50);
                }
                iprot.readSetEnd();
              }
              struct.setChartIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XIAOHA_OBJ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xiaohaObjId = iprot.readString();
              struct.setXiaohaObjIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_FOLDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentFolderId = iprot.readI64();
              struct.setParentFolderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHART_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chartType = ChartType.findByValue(iprot.readI32());
              struct.setChartTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMODITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityName = iprot.readString();
              struct.setCommodityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plate = iprot.readString();
              struct.setPlateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // KEY_WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set51 = iprot.readSetBegin();
                struct.keyWords = new HashSet<String>(2*_set51.size);
                for (int _i52 = 0; _i52 < _set51.size; ++_i52)
                {
                  String _elem53;
                  _elem53 = iprot.readString();
                  struct.keyWords.add(_elem53);
                }
                iprot.readSetEnd();
              }
              struct.setKeyWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqChartOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chartIds != null) {
        if (struct.isSetChartIds()) {
          oprot.writeFieldBegin(CHART_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.chartIds.size()));
            for (long _iter54 : struct.chartIds)
            {
              oprot.writeI64(_iter54);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.xiaohaObjId != null) {
        if (struct.isSetXiaohaObjId()) {
          oprot.writeFieldBegin(XIAOHA_OBJ_ID_FIELD_DESC);
          oprot.writeString(struct.xiaohaObjId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentFolderId()) {
        oprot.writeFieldBegin(PARENT_FOLDER_ID_FIELD_DESC);
        oprot.writeI64(struct.parentFolderId);
        oprot.writeFieldEnd();
      }
      if (struct.chartType != null) {
        if (struct.isSetChartType()) {
          oprot.writeFieldBegin(CHART_TYPE_FIELD_DESC);
          oprot.writeI32(struct.chartType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityName != null) {
        if (struct.isSetCommodityName()) {
          oprot.writeFieldBegin(COMMODITY_NAME_FIELD_DESC);
          oprot.writeString(struct.commodityName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plate != null) {
        if (struct.isSetPlate()) {
          oprot.writeFieldBegin(PLATE_FIELD_DESC);
          oprot.writeString(struct.plate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyWords != null) {
        if (struct.isSetKeyWords()) {
          oprot.writeFieldBegin(KEY_WORDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.keyWords.size()));
            for (String _iter55 : struct.keyWords)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqChartOptionTupleSchemeFactory implements SchemeFactory {
    public ReqChartOptionTupleScheme getScheme() {
      return new ReqChartOptionTupleScheme();
    }
  }

  private static class ReqChartOptionTupleScheme extends TupleScheme<ReqChartOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqChartOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChartIds()) {
        optionals.set(0);
      }
      if (struct.isSetXiaohaObjId()) {
        optionals.set(1);
      }
      if (struct.isSetParentFolderId()) {
        optionals.set(2);
      }
      if (struct.isSetChartType()) {
        optionals.set(3);
      }
      if (struct.isSetCommodityName()) {
        optionals.set(4);
      }
      if (struct.isSetPlate()) {
        optionals.set(5);
      }
      if (struct.isSetName()) {
        optionals.set(6);
      }
      if (struct.isSetKeyWords()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetChartIds()) {
        {
          oprot.writeI32(struct.chartIds.size());
          for (long _iter56 : struct.chartIds)
          {
            oprot.writeI64(_iter56);
          }
        }
      }
      if (struct.isSetXiaohaObjId()) {
        oprot.writeString(struct.xiaohaObjId);
      }
      if (struct.isSetParentFolderId()) {
        oprot.writeI64(struct.parentFolderId);
      }
      if (struct.isSetChartType()) {
        oprot.writeI32(struct.chartType.getValue());
      }
      if (struct.isSetCommodityName()) {
        oprot.writeString(struct.commodityName);
      }
      if (struct.isSetPlate()) {
        oprot.writeString(struct.plate);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetKeyWords()) {
        {
          oprot.writeI32(struct.keyWords.size());
          for (String _iter57 : struct.keyWords)
          {
            oprot.writeString(_iter57);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqChartOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set58 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.chartIds = new HashSet<Long>(2*_set58.size);
          for (int _i59 = 0; _i59 < _set58.size; ++_i59)
          {
            long _elem60;
            _elem60 = iprot.readI64();
            struct.chartIds.add(_elem60);
          }
        }
        struct.setChartIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xiaohaObjId = iprot.readString();
        struct.setXiaohaObjIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentFolderId = iprot.readI64();
        struct.setParentFolderIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chartType = ChartType.findByValue(iprot.readI32());
        struct.setChartTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.commodityName = iprot.readString();
        struct.setCommodityNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.plate = iprot.readString();
        struct.setPlateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set61 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keyWords = new HashSet<String>(2*_set61.size);
          for (int _i62 = 0; _i62 < _set61.size; ++_i62)
          {
            String _elem63;
            _elem63 = iprot.readString();
            struct.keyWords.add(_elem63);
          }
        }
        struct.setKeyWordsIsSet(true);
      }
    }
  }

}

